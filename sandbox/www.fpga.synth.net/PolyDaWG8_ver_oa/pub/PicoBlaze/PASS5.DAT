    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Program: MIDICTRL.psm (polyphonic)
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;  Author: Scott R. Gravenhorst
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;    Date: 01-25-2007
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Rev date: 10-24-2008
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Version: 1.23
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;----------------------------------------------------------------------------------------
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.03 Add control ports for 4 NCOs pitch values.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.04 system exclusive message input implemetation
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          sysex mfr ID 7F
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.05 Combine all single bit flags into one register.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          Attempt to combine byte counts into one register instead of two
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          to facilitate register usage in more complex dual UART ISR.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.06 Added parameter update via sysex.  Sysex data message is in address/data
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          format.  Address currently starts at 0x20 and ends at 0x7F because sysex
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          data values (including the address value) can't be larger than 0x7F.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          If ports become scarce, this can be chaged to also allow 0x00 - 0x1F at
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          the expense of external circuitry rework.  Sysex data is applied to
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          to synth by using the address value to select the port using a register
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          as a port pointer. Note that no address range checking is performed.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.07 Added selectable waveform NCOs
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.08 Remove sysex message type, add model number byte.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.09 sysex address space changed to 00 to 7F from 20 to 7F
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.10 sysex address space expanded to 14 bits.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.11 Add constant MIDI_TRANSPOSE.  This provides a way to give more range to the
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          upper end of the keyboard for when large offsets used.  Without this
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          constant (subtracted from all MIDI note numbers), this program will subtract
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          octaves until the note number no longer has bit 7 set.  Actual pitch is then
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          adjusted in the hardware in the NCO (nco_v8.v) module.  For the Korg
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          Wavestation, I've found that hex 14 works well.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.12 Add LCD Project name and author text.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.13 This file switches to the DWG synth, first version.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          Notes are presented in MIDI note number, not note - octave.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;  POLYSYNTH...
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.14 First polysynth, 2 strings.  Some of the notes above here no longer apply.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.15 4 strings.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.16 6 strings.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.17 Piano like action, sustain pedal
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.18 8 strings.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.19 Discovered a problem with the way the sustain pedal works.  rework here and
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;          in the main module (PolyDaWG8.v)
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.20 dual display for defining what mod wheel does.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.21 Voices stolen from keys held down.  Hardware is different, ver_l required.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.22 Changed LCD display of mode from N/O to Norm/Orig
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Ver 1.23 Remove LCD code for Avnet board
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; MIDI UART input and synth control program.  Receives and interprets MIDI data.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; MIDI support includes what Korg Wavestation can send.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; note on/off, mod wheel, pitch wheel, joystick X and Y, channel pressure, sustain pedal.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Note: DATAbyte1 represents the first data byte for commands which use 2 data bytes.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;       DATAbyte2 represents the second data byte for commands which use 2 data bytes.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;       DATAbyte2 represents the only data byte for commands which use 1 data byte.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MFR_ID, 7F
  LOGFORMAT-CONSTANT MFR_ID, 7F
INSTRUCTION-CONSTANT
   OPERAND1-MFR_ID
  OP1 VALUE-MFR_ID
   OPERAND2-7F
  OP2 VALUE-7F
    COMMENT-; my mfr ID - Change this if you want a different ID
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MODEL_NUMBER, 01
  LOGFORMAT-CONSTANT MODEL_NUMBER, 01
INSTRUCTION-CONSTANT
   OPERAND1-MODEL_NUMBER
  OP1 VALUE-MODEL_NUMBER
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-; 00 = GateMan-I; 01 = PolyDaWG6
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT UNIT_NUMBER, 00
  LOGFORMAT-CONSTANT UNIT_NUMBER, 00
INSTRUCTION-CONSTANT
   OPERAND1-UNIT_NUMBER
  OP1 VALUE-UNIT_NUMBER
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-; unit number
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MIDI_TRANSPOSE, 14
  LOGFORMAT-CONSTANT MIDI_TRANSPOSE, 14
INSTRUCTION-CONSTANT
   OPERAND1-MIDI_TRANSPOSE
  OP1 VALUE-MIDI_TRANSPOSE
   OPERAND2-14
  OP2 VALUE-14
    COMMENT-; how much to SUBTRACT from MIDI note numbers for note on/off messages
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; this gives more range on the high end
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Bit definition constants as masks
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT rxready_bit, 02
  LOGFORMAT-CONSTANT rxready_bit, 02
INSTRUCTION-CONSTANT
   OPERAND1-rxready_bit
  OP1 VALUE-rxready_bit
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-; bit mask to sense for rx data available
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MIDIbyteAVAILABLE_bit, 01
  LOGFORMAT-CONSTANT MIDIbyteAVAILABLE_bit, 01
INSTRUCTION-CONSTANT
   OPERAND1-MIDIbyteAVAILABLE_bit
  OP1 VALUE-MIDIbyteAVAILABLE_bit
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-; FLAGS register TEST mask
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT TTYbyteAVAILABLE_bit, 02
  LOGFORMAT-CONSTANT TTYbyteAVAILABLE_bit, 02
INSTRUCTION-CONSTANT
   OPERAND1-TTYbyteAVAILABLE_bit
  OP1 VALUE-TTYbyteAVAILABLE_bit
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-; FLAGS register TEST mask
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MESSAGEcomplete_bit, 04
  LOGFORMAT-CONSTANT MESSAGEcomplete_bit, 04
INSTRUCTION-CONSTANT
   OPERAND1-MESSAGEcomplete_bit
  OP1 VALUE-MESSAGEcomplete_bit
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-; FLAGS register TEST mask
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MIDIbyteAVAILABLE_set, 01
  LOGFORMAT-CONSTANT MIDIbyteAVAILABLE_set, 01
INSTRUCTION-CONSTANT
   OPERAND1-MIDIbyteAVAILABLE_set
  OP1 VALUE-MIDIbyteAVAILABLE_set
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-; FLAGS register TEST mask
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT TTYbyteAVAILABLE_set, 02
  LOGFORMAT-CONSTANT TTYbyteAVAILABLE_set, 02
INSTRUCTION-CONSTANT
   OPERAND1-TTYbyteAVAILABLE_set
  OP1 VALUE-TTYbyteAVAILABLE_set
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-; FLAGS register TEST mask
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MESSAGEcomplete_set, 04
  LOGFORMAT-CONSTANT MESSAGEcomplete_set, 04
INSTRUCTION-CONSTANT
   OPERAND1-MESSAGEcomplete_set
  OP1 VALUE-MESSAGEcomplete_set
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-; FLAGS register TEST mask
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MIDIbyteAVAILABLE_clr, FE
  LOGFORMAT-CONSTANT MIDIbyteAVAILABLE_clr, FE
INSTRUCTION-CONSTANT
   OPERAND1-MIDIbyteAVAILABLE_clr
  OP1 VALUE-MIDIbyteAVAILABLE_clr
   OPERAND2-FE
  OP2 VALUE-FE
    COMMENT-; FLAGS register TEST mask
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT TTYbyteAVAILABLE_clr, FD
  LOGFORMAT-CONSTANT TTYbyteAVAILABLE_clr, FD
INSTRUCTION-CONSTANT
   OPERAND1-TTYbyteAVAILABLE_clr
  OP1 VALUE-TTYbyteAVAILABLE_clr
   OPERAND2-FD
  OP2 VALUE-FD
    COMMENT-; FLAGS register TEST mask
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MESSAGEcomplete_clr, FB
  LOGFORMAT-CONSTANT MESSAGEcomplete_clr, FB
INSTRUCTION-CONSTANT
   OPERAND1-MESSAGEcomplete_clr
  OP1 VALUE-MESSAGEcomplete_clr
   OPERAND2-FB
  OP2 VALUE-FB
    COMMENT-; FLAGS register TEST mask
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MIDI_UARTstatus_bit, 40
  LOGFORMAT-CONSTANT MIDI_UARTstatus_bit, 40
INSTRUCTION-CONSTANT
   OPERAND1-MIDI_UARTstatus_bit
  OP1 VALUE-MIDI_UARTstatus_bit
   OPERAND2-40
  OP2 VALUE-40
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT TTY_UARTstatus_bit, 80
  LOGFORMAT-CONSTANT TTY_UARTstatus_bit, 80
INSTRUCTION-CONSTANT
   OPERAND1-TTY_UARTstatus_bit
  OP1 VALUE-TTY_UARTstatus_bit
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; MIDI CONSTANTS
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; message type constants
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT K_NoteOff, 80
  LOGFORMAT-CONSTANT K_NoteOff, 80
INSTRUCTION-CONSTANT
   OPERAND1-K_NoteOff
  OP1 VALUE-K_NoteOff
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT K_NoteOn, 90
  LOGFORMAT-CONSTANT K_NoteOn, 90
INSTRUCTION-CONSTANT
   OPERAND1-K_NoteOn
  OP1 VALUE-K_NoteOn
   OPERAND2-90
  OP2 VALUE-90
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT K_PolyKeyPressure, A0
  LOGFORMAT-CONSTANT K_PolyKeyPressure, A0
INSTRUCTION-CONSTANT
   OPERAND1-K_PolyKeyPressure
  OP1 VALUE-K_PolyKeyPressure
   OPERAND2-A0
  OP2 VALUE-A0
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT K_ControllerChange, B0
  LOGFORMAT-CONSTANT K_ControllerChange, B0
INSTRUCTION-CONSTANT
   OPERAND1-K_ControllerChange
  OP1 VALUE-K_ControllerChange
   OPERAND2-B0
  OP2 VALUE-B0
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT K_ProgramChange, C0
  LOGFORMAT-CONSTANT K_ProgramChange, C0
INSTRUCTION-CONSTANT
   OPERAND1-K_ProgramChange
  OP1 VALUE-K_ProgramChange
   OPERAND2-C0
  OP2 VALUE-C0
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT K_ChannelPressure, D0
  LOGFORMAT-CONSTANT K_ChannelPressure, D0
INSTRUCTION-CONSTANT
   OPERAND1-K_ChannelPressure
  OP1 VALUE-K_ChannelPressure
   OPERAND2-D0
  OP2 VALUE-D0
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT K_PitchBend, E0
  LOGFORMAT-CONSTANT K_PitchBend, E0
INSTRUCTION-CONSTANT
   OPERAND1-K_PitchBend
  OP1 VALUE-K_PitchBend
   OPERAND2-E0
  OP2 VALUE-E0
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT K_System, F0
  LOGFORMAT-CONSTANT K_System, F0
INSTRUCTION-CONSTANT
   OPERAND1-K_System
  OP1 VALUE-K_System
   OPERAND2-F0
  OP2 VALUE-F0
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Controller Change byte 1 constants:
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MOD_WHEEL, 01
  LOGFORMAT-CONSTANT MOD_WHEEL, 01
INSTRUCTION-CONSTANT
   OPERAND1-MOD_WHEEL
  OP1 VALUE-MOD_WHEEL
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SUSTAIN, 40
  LOGFORMAT-CONSTANT SUSTAIN, 40
INSTRUCTION-CONSTANT
   OPERAND1-SUSTAIN
  OP1 VALUE-SUSTAIN
   OPERAND2-40
  OP2 VALUE-40
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT JOYSTICK_X, 10
  LOGFORMAT-CONSTANT JOYSTICK_X, 10
INSTRUCTION-CONSTANT
   OPERAND1-JOYSTICK_X
  OP1 VALUE-JOYSTICK_X
   OPERAND2-10
  OP2 VALUE-10
    COMMENT-; Korg Wavestation, don't know about others.
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT JOYSTICK_Y, 11
  LOGFORMAT-CONSTANT JOYSTICK_Y, 11
INSTRUCTION-CONSTANT
   OPERAND1-JOYSTICK_Y
  OP1 VALUE-JOYSTICK_Y
   OPERAND2-11
  OP2 VALUE-11
    COMMENT-; Korg Wavestation, don't know about others.
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT ALL_NOTES_OFF, 7B
  LOGFORMAT-CONSTANT ALL_NOTES_OFF, 7B
INSTRUCTION-CONSTANT
   OPERAND1-ALL_NOTES_OFF
  OP1 VALUE-ALL_NOTES_OFF
   OPERAND2-7B
  OP2 VALUE-7B
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;; READ ONLY PORTS:
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; UART
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT UARTstatusport, 00
  LOGFORMAT-CONSTANT UARTstatusport, 00
INSTRUCTION-CONSTANT
   OPERAND1-UARTstatusport
  OP1 VALUE-UARTstatusport
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-; port number for rx and tx status (read only)
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MIDIrxdataport, 01
  LOGFORMAT-CONSTANT MIDIrxdataport, 01
INSTRUCTION-CONSTANT
   OPERAND1-MIDIrxdataport
  OP1 VALUE-MIDIrxdataport
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-; port number for rx data register (read only)
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Slide switches
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SWITCH_PORT, 02
  LOGFORMAT-CONSTANT SWITCH_PORT, 02
INSTRUCTION-CONSTANT
   OPERAND1-SWITCH_PORT
  OP1 VALUE-SWITCH_PORT
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-; port number for slide switches (read only)
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT TTYrxdataport, 04
  LOGFORMAT-CONSTANT TTYrxdataport, 04
INSTRUCTION-CONSTANT
   OPERAND1-TTYrxdataport
  OP1 VALUE-TTYrxdataport
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-; port number for rx data register (read only)
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT TRANSPOSE, 03
  LOGFORMAT-CONSTANT TRANSPOSE, 03
INSTRUCTION-CONSTANT
   OPERAND1-TRANSPOSE
  OP1 VALUE-TRANSPOSE
   OPERAND2-03
  OP2 VALUE-03
    COMMENT-; port number for transposition factor
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MODWHEELSTATE, 05
  LOGFORMAT-CONSTANT MODWHEELSTATE, 05
INSTRUCTION-CONSTANT
   OPERAND1-MODWHEELSTATE
  OP1 VALUE-MODWHEELSTATE
   OPERAND2-05
  OP2 VALUE-05
    COMMENT-; what state the mod wheel usage is in, bit 0
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT ACTIVE, 06
  LOGFORMAT-CONSTANT ACTIVE, 06
INSTRUCTION-CONSTANT
   OPERAND1-ACTIVE
  OP1 VALUE-ACTIVE
   OPERAND2-06
  OP2 VALUE-06
    COMMENT-; vibrational state of each string, one bit per string
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;; WRITE ONLY PORTS:
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Global ports [02-0F], affect all voices:
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT CHANNEL_PRESSURE_PORT, F0
  LOGFORMAT-CONSTANT CHANNEL_PRESSURE_PORT, F0
INSTRUCTION-CONSTANT
   OPERAND1-CHANNEL_PRESSURE_PORT
  OP1 VALUE-CHANNEL_PRESSURE_PORT
   OPERAND2-F0
  OP2 VALUE-F0
    COMMENT-; channel pressure value, global
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PITCH_WHEEL_MSB_PORT, F1
  LOGFORMAT-CONSTANT PITCH_WHEEL_MSB_PORT, F1
INSTRUCTION-CONSTANT
   OPERAND1-PITCH_WHEEL_MSB_PORT
  OP1 VALUE-PITCH_WHEEL_MSB_PORT
   OPERAND2-F1
  OP2 VALUE-F1
    COMMENT-; pitch wheel MSB, global
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PITCH_WHEEL_LSB_PORT, F2
  LOGFORMAT-CONSTANT PITCH_WHEEL_LSB_PORT, F2
INSTRUCTION-CONSTANT
   OPERAND1-PITCH_WHEEL_LSB_PORT
  OP1 VALUE-PITCH_WHEEL_LSB_PORT
   OPERAND2-F2
  OP2 VALUE-F2
    COMMENT-; pitch wheel LSB, global
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MOD_WHEEL_PORT, 11
  LOGFORMAT-CONSTANT MOD_WHEEL_PORT, 11
INSTRUCTION-CONSTANT
   OPERAND1-MOD_WHEEL_PORT
  OP1 VALUE-MOD_WHEEL_PORT
   OPERAND2-11
  OP2 VALUE-11
    COMMENT-; modulation wheel, global
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT JOYSTICK_X_PORT, F4
  LOGFORMAT-CONSTANT JOYSTICK_X_PORT, F4
INSTRUCTION-CONSTANT
   OPERAND1-JOYSTICK_X_PORT
  OP1 VALUE-JOYSTICK_X_PORT
   OPERAND2-F4
  OP2 VALUE-F4
    COMMENT-; joystick X, global
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT JOYSTICK_Y_PORT, F5
  LOGFORMAT-CONSTANT JOYSTICK_Y_PORT, F5
INSTRUCTION-CONSTANT
   OPERAND1-JOYSTICK_Y_PORT
  OP1 VALUE-JOYSTICK_Y_PORT
   OPERAND2-F5
  OP2 VALUE-F5
    COMMENT-; joystick Y, global
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT VOICE_SELECT_PORT, F6
  LOGFORMAT-CONSTANT VOICE_SELECT_PORT, F6
INSTRUCTION-CONSTANT
   OPERAND1-VOICE_SELECT_PORT
  OP1 VALUE-VOICE_SELECT_PORT
   OPERAND2-F6
  OP2 VALUE-F6
    COMMENT-; For poly, selects the voice to talk to when
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; sending or updating voice info.
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SUSTAIN_PORT, 12
  LOGFORMAT-CONSTANT SUSTAIN_PORT, 12
INSTRUCTION-CONSTANT
   OPERAND1-SUSTAIN_PORT
  OP1 VALUE-SUSTAIN_PORT
   OPERAND2-12
  OP2 VALUE-12
    COMMENT-; FF when depressed, 00 when not depressed.
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT GATE_PORT, 13
  LOGFORMAT-CONSTANT GATE_PORT, 13
INSTRUCTION-CONSTANT
   OPERAND1-GATE_PORT
  OP1 VALUE-GATE_PORT
   OPERAND2-13
  OP2 VALUE-13
    COMMENT-; GATE signal, per voice
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT VEL0_PORT, 00
  LOGFORMAT-CONSTANT VEL0_PORT, 00
INSTRUCTION-CONSTANT
   OPERAND1-VEL0_PORT
  OP1 VALUE-VEL0_PORT
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-; ports for sending velocity (per voice) to synth
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT VEL1_PORT, 01
  LOGFORMAT-CONSTANT VEL1_PORT, 01
INSTRUCTION-CONSTANT
   OPERAND1-VEL1_PORT
  OP1 VALUE-VEL1_PORT
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT VEL2_PORT, 02
  LOGFORMAT-CONSTANT VEL2_PORT, 02
INSTRUCTION-CONSTANT
   OPERAND1-VEL2_PORT
  OP1 VALUE-VEL2_PORT
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT VEL3_PORT, 03
  LOGFORMAT-CONSTANT VEL3_PORT, 03
INSTRUCTION-CONSTANT
   OPERAND1-VEL3_PORT
  OP1 VALUE-VEL3_PORT
   OPERAND2-03
  OP2 VALUE-03
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT VEL4_PORT, 04
  LOGFORMAT-CONSTANT VEL4_PORT, 04
INSTRUCTION-CONSTANT
   OPERAND1-VEL4_PORT
  OP1 VALUE-VEL4_PORT
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT VEL5_PORT, 05
  LOGFORMAT-CONSTANT VEL5_PORT, 05
INSTRUCTION-CONSTANT
   OPERAND1-VEL5_PORT
  OP1 VALUE-VEL5_PORT
   OPERAND2-05
  OP2 VALUE-05
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT VEL6_PORT, 06
  LOGFORMAT-CONSTANT VEL6_PORT, 06
INSTRUCTION-CONSTANT
   OPERAND1-VEL6_PORT
  OP1 VALUE-VEL6_PORT
   OPERAND2-06
  OP2 VALUE-06
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT VEL7_PORT, 07
  LOGFORMAT-CONSTANT VEL7_PORT, 07
INSTRUCTION-CONSTANT
   OPERAND1-VEL7_PORT
  OP1 VALUE-VEL7_PORT
   OPERAND2-07
  OP2 VALUE-07
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE0_PORT, 08
  LOGFORMAT-CONSTANT NOTE0_PORT, 08
INSTRUCTION-CONSTANT
   OPERAND1-NOTE0_PORT
  OP1 VALUE-NOTE0_PORT
   OPERAND2-08
  OP2 VALUE-08
    COMMENT-; ports for sending note number (per voice) to synth
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE1_PORT, 09
  LOGFORMAT-CONSTANT NOTE1_PORT, 09
INSTRUCTION-CONSTANT
   OPERAND1-NOTE1_PORT
  OP1 VALUE-NOTE1_PORT
   OPERAND2-09
  OP2 VALUE-09
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE2_PORT, 0A
  LOGFORMAT-CONSTANT NOTE2_PORT, 0A
INSTRUCTION-CONSTANT
   OPERAND1-NOTE2_PORT
  OP1 VALUE-NOTE2_PORT
   OPERAND2-0A
  OP2 VALUE-0A
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE3_PORT, 0B
  LOGFORMAT-CONSTANT NOTE3_PORT, 0B
INSTRUCTION-CONSTANT
   OPERAND1-NOTE3_PORT
  OP1 VALUE-NOTE3_PORT
   OPERAND2-0B
  OP2 VALUE-0B
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE4_PORT, 0C
  LOGFORMAT-CONSTANT NOTE4_PORT, 0C
INSTRUCTION-CONSTANT
   OPERAND1-NOTE4_PORT
  OP1 VALUE-NOTE4_PORT
   OPERAND2-0C
  OP2 VALUE-0C
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE5_PORT, 0D
  LOGFORMAT-CONSTANT NOTE5_PORT, 0D
INSTRUCTION-CONSTANT
   OPERAND1-NOTE5_PORT
  OP1 VALUE-NOTE5_PORT
   OPERAND2-0D
  OP2 VALUE-0D
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE6_PORT, 0E
  LOGFORMAT-CONSTANT NOTE6_PORT, 0E
INSTRUCTION-CONSTANT
   OPERAND1-NOTE6_PORT
  OP1 VALUE-NOTE6_PORT
   OPERAND2-0E
  OP2 VALUE-0E
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE7_PORT, 0F
  LOGFORMAT-CONSTANT NOTE7_PORT, 0F
INSTRUCTION-CONSTANT
   OPERAND1-NOTE7_PORT
  OP1 VALUE-NOTE7_PORT
   OPERAND2-0F
  OP2 VALUE-0F
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT LED_PORT, FE
  LOGFORMAT-CONSTANT LED_PORT, FE
INSTRUCTION-CONSTANT
   OPERAND1-LED_PORT
  OP1 VALUE-LED_PORT
   OPERAND2-FE
  OP2 VALUE-FE
    COMMENT-; for diagnostics, may be removed later...
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT resetport, FF
  LOGFORMAT-CONSTANT resetport, FF
INSTRUCTION-CONSTANT
   OPERAND1-resetport
  OP1 VALUE-resetport
   OPERAND2-FF
  OP2 VALUE-FF
    COMMENT-; this port doesn't actually output anything.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Writing any data it's address resets the UART.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;; SCRATCH PAD RAM ADDRESSES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE0, 20
  LOGFORMAT-CONSTANT NOTE0, 20
INSTRUCTION-CONSTANT
   OPERAND1-NOTE0
  OP1 VALUE-NOTE0
   OPERAND2-20
  OP2 VALUE-20
    COMMENT-; save the note number for lookup later (to manage note off messages)
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE1, 21
  LOGFORMAT-CONSTANT NOTE1, 21
INSTRUCTION-CONSTANT
   OPERAND1-NOTE1
  OP1 VALUE-NOTE1
   OPERAND2-21
  OP2 VALUE-21
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE2, 22
  LOGFORMAT-CONSTANT NOTE2, 22
INSTRUCTION-CONSTANT
   OPERAND1-NOTE2
  OP1 VALUE-NOTE2
   OPERAND2-22
  OP2 VALUE-22
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE3, 23
  LOGFORMAT-CONSTANT NOTE3, 23
INSTRUCTION-CONSTANT
   OPERAND1-NOTE3
  OP1 VALUE-NOTE3
   OPERAND2-23
  OP2 VALUE-23
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE4, 24
  LOGFORMAT-CONSTANT NOTE4, 24
INSTRUCTION-CONSTANT
   OPERAND1-NOTE4
  OP1 VALUE-NOTE4
   OPERAND2-24
  OP2 VALUE-24
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE5, 25
  LOGFORMAT-CONSTANT NOTE5, 25
INSTRUCTION-CONSTANT
   OPERAND1-NOTE5
  OP1 VALUE-NOTE5
   OPERAND2-25
  OP2 VALUE-25
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE6, 26
  LOGFORMAT-CONSTANT NOTE6, 26
INSTRUCTION-CONSTANT
   OPERAND1-NOTE6
  OP1 VALUE-NOTE6
   OPERAND2-26
  OP2 VALUE-26
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT NOTE7, 27
  LOGFORMAT-CONSTANT NOTE7, 27
INSTRUCTION-CONSTANT
   OPERAND1-NOTE7
  OP1 VALUE-NOTE7
   OPERAND2-27
  OP2 VALUE-27
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT GATES, 30
  LOGFORMAT-CONSTANT GATES, 30
INSTRUCTION-CONSTANT
   OPERAND1-GATES
  OP1 VALUE-GATES
   OPERAND2-30
  OP2 VALUE-30
    COMMENT-; spRAM storage for maintaining the gates
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT ROUNDROBIN, 31
  LOGFORMAT-CONSTANT ROUNDROBIN, 31
INSTRUCTION-CONSTANT
   OPERAND1-ROUNDROBIN
  OP1 VALUE-ROUNDROBIN
   OPERAND2-31
  OP2 VALUE-31
    COMMENT-; used for selecting a "random" string when all are currently busy
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SUS, 32
  LOGFORMAT-CONSTANT SUS, 32
INSTRUCTION-CONSTANT
   OPERAND1-SUS
  OP1 VALUE-SUS
   OPERAND2-32
  OP2 VALUE-32
    COMMENT-; used to save sustain pedal state.
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT MIDIinputBYTE, 3E
  LOGFORMAT-CONSTANT MIDIinputBYTE, 3E
INSTRUCTION-CONSTANT
   OPERAND1-MIDIinputBYTE
  OP1 VALUE-MIDIinputBYTE
   OPERAND2-3E
  OP2 VALUE-3E
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT TTYinputBYTE, 3F
  LOGFORMAT-CONSTANT TTYinputBYTE, 3F
INSTRUCTION-CONSTANT
   OPERAND1-TTYinputBYTE
  OP1 VALUE-TTYinputBYTE
   OPERAND2-3F
  OP2 VALUE-3F
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; System Exclusive Message structure:
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; MFR ID
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; MODEL NUMBER
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; UNIT NUMBER
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; PARAMETER ADDRESS MSB
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; PARAMETER ADDRESS LSB
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; PARAMETER DATA
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SYSEX_MSB_PORT, E0
  LOGFORMAT-CONSTANT SYSEX_MSB_PORT, E0
INSTRUCTION-CONSTANT
   OPERAND1-SYSEX_MSB_PORT
  OP1 VALUE-SYSEX_MSB_PORT
   OPERAND2-E0
  OP2 VALUE-E0
    COMMENT-; most significant 7 bits of the sysex address space
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; ports 00 through 7F are for sysex updatable registers
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Name and reserve registers.
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG s0, MIDIbyte
  LOGFORMAT-NAMEREG s0, MIDIbyte
INSTRUCTION-NAMEREG
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-MIDIbyte
  OP2 VALUE-MIDIbyte
    COMMENT-; latest received MIDI byte
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG s1, RUNNINGstatus
  LOGFORMAT-NAMEREG s1, RUNNINGstatus
INSTRUCTION-NAMEREG
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-RUNNINGstatus
  OP2 VALUE-RUNNINGstatus
    COMMENT-; holds the current MIDI running status value
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG s2, MessageTYPE
  LOGFORMAT-NAMEREG s2, MessageTYPE
INSTRUCTION-NAMEREG
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-MessageTYPE
  OP2 VALUE-MessageTYPE
    COMMENT-; Message type, i.e., high nybble
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG s3, MessageCHANNEL
  LOGFORMAT-NAMEREG s3, MessageCHANNEL
INSTRUCTION-NAMEREG
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-MessageCHANNEL
  OP2 VALUE-MessageCHANNEL
    COMMENT-; Message channel, i.e., low nybble
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; DATAbyteCOUNT is the counter that controls what happens to MIDI data bytes.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; DATAbyteCOUNTrunstat holds the data byte count value to load into DATAbyteCOUNT to refresh
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; it when a message comes in assuming valid running status.
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG s4, DATAbyteCOUNT
  LOGFORMAT-NAMEREG s4, DATAbyteCOUNT
INSTRUCTION-NAMEREG
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-DATAbyteCOUNT
  OP2 VALUE-DATAbyteCOUNT
    COMMENT-; how many more bytes to satisfy the current message
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG s5, DATAbyteCOUNTrunstat
  LOGFORMAT-NAMEREG s5, DATAbyteCOUNTrunstat
INSTRUCTION-NAMEREG
   OPERAND1-s5
  OP1 VALUE-s5
   OPERAND2-DATAbyteCOUNTrunstat
  OP2 VALUE-DATAbyteCOUNTrunstat
    COMMENT-; holds replenishment value for DATAbyteCOUNT for running status
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG s6, DATAbyte1
  LOGFORMAT-NAMEREG s6, DATAbyte1
INSTRUCTION-NAMEREG
   OPERAND1-s6
  OP1 VALUE-s6
   OPERAND2-DATAbyte1
  OP2 VALUE-DATAbyte1
    COMMENT-; for current message storage of data byte 1
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG s7, DATAbyte2
  LOGFORMAT-NAMEREG s7, DATAbyte2
INSTRUCTION-NAMEREG
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-DATAbyte2
  OP2 VALUE-DATAbyte2
    COMMENT-; for current message storage of data byte 2
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;       1 means a complete MIDI message is ready to process
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The code which processes this message will reset MESSAGE_COMPLETE to zero
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; s8  IS UNUSED
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG s9, COMMANDbyte
  LOGFORMAT-NAMEREG s9, COMMANDbyte
INSTRUCTION-NAMEREG
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-COMMANDbyte
  OP2 VALUE-COMMANDbyte
    COMMENT-; command byte, contains command nybble and channel nybble of current message
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG sA, FLAGS
  LOGFORMAT-NAMEREG sA, FLAGS
INSTRUCTION-NAMEREG
   OPERAND1-sA
  OP1 VALUE-sA
   OPERAND2-FLAGS
  OP2 VALUE-FLAGS
    COMMENT-; FLAGS register contains single bit flags
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG sB, SYSEX
  LOGFORMAT-NAMEREG sB, SYSEX
INSTRUCTION-NAMEREG
   OPERAND1-sB
  OP1 VALUE-sB
   OPERAND2-SYSEX
  OP2 VALUE-SYSEX
    COMMENT-; sysex state machine state register
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG sC, UARTbyte
  LOGFORMAT-NAMEREG sC, UARTbyte
INSTRUCTION-NAMEREG
   OPERAND1-sC
  OP1 VALUE-sC
   OPERAND2-UARTbyte
  OP2 VALUE-UARTbyte
    COMMENT-; incoming UART data byte, used by ISR
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; sD    used for destination pointer, considered temporary data storage
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; sE    used for a source pointer, considered temporary data storage.  sysex mode stores addr (port) here.
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG sF, TEMP
  LOGFORMAT-NAMEREG sF, TEMP
INSTRUCTION-NAMEREG
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-TEMP
  OP2 VALUE-TEMP
    COMMENT-; local loop or routine temp storage
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;; CODE STARTS HERE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-ADDRESS 000
  LOGFORMAT-ADDRESS 000
INSTRUCTION-ADDRESS
   OPERAND1-000
  OP1 VALUE-000
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-000
      LABEL-cold_start
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; initialize storage
    ADDRESS-000
      LABEL-
  FORMATTED-OUTPUT MessageTYPE, resetport
  LOGFORMAT-OUTPUT MessageTYPE[s2], resetport[FF]
INSTRUCTION-OUTPUT
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-resetport
  OP2 VALUE-FF
    COMMENT-; Causes reset by addressing port 80-FF.  content doesn't matter.
    ADDRESS-001
      LABEL-
  FORMATTED-LOAD MIDIbyte, 00
  LOGFORMAT-LOAD MIDIbyte[s0], 00
INSTRUCTION-LOAD
   OPERAND1-MIDIbyte
  OP1 VALUE-s0
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-002
      LABEL-
  FORMATTED-LOAD FLAGS, 00
  LOGFORMAT-LOAD FLAGS[sA], 00
INSTRUCTION-LOAD
   OPERAND1-FLAGS
  OP1 VALUE-sA
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-003
      LABEL-
  FORMATTED-LOAD RUNNINGstatus, 00
  LOGFORMAT-LOAD RUNNINGstatus[s1], 00
INSTRUCTION-LOAD
   OPERAND1-RUNNINGstatus
  OP1 VALUE-s1
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-004
      LABEL-
  FORMATTED-LOAD DATAbyteCOUNT, 00
  LOGFORMAT-LOAD DATAbyteCOUNT[s4], 00
INSTRUCTION-LOAD
   OPERAND1-DATAbyteCOUNT
  OP1 VALUE-s4
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-005
      LABEL-
  FORMATTED-LOAD DATAbyteCOUNTrunstat, 00
  LOGFORMAT-LOAD DATAbyteCOUNTrunstat[s5], 00
INSTRUCTION-LOAD
   OPERAND1-DATAbyteCOUNTrunstat
  OP1 VALUE-s5
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-006
      LABEL-
  FORMATTED-LOAD DATAbyte1, 00
  LOGFORMAT-LOAD DATAbyte1[s6], 00
INSTRUCTION-LOAD
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-007
      LABEL-
  FORMATTED-LOAD DATAbyte2, 00
  LOGFORMAT-LOAD DATAbyte2[s7], 00
INSTRUCTION-LOAD
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-008
      LABEL-
  FORMATTED-LOAD SYSEX, 00
  LOGFORMAT-LOAD SYSEX[sB], 00
INSTRUCTION-LOAD
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-009
      LABEL-
  FORMATTED-LOAD TEMP, 00
  LOGFORMAT-LOAD TEMP[sF], 00
INSTRUCTION-LOAD
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-00A
      LABEL-
  FORMATTED-OUTPUT TEMP, GATE_PORT
  LOGFORMAT-OUTPUT TEMP[sF], GATE_PORT[13]
INSTRUCTION-OUTPUT
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-GATE_PORT
  OP2 VALUE-13
    COMMENT-; force GATEs off
    ADDRESS-00B
      LABEL-
  FORMATTED-OUTPUT TEMP, VEL0_PORT
  LOGFORMAT-OUTPUT TEMP[sF], VEL0_PORT[00]
INSTRUCTION-OUTPUT
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-VEL0_PORT
  OP2 VALUE-00
    COMMENT-; force VELOCITY to zero
    ADDRESS-00C
      LABEL-
  FORMATTED-OUTPUT TEMP, VEL1_PORT
  LOGFORMAT-OUTPUT TEMP[sF], VEL1_PORT[01]
INSTRUCTION-OUTPUT
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-VEL1_PORT
  OP2 VALUE-01
    COMMENT-; force VELOCITY to zero
    ADDRESS-00D
      LABEL-
  FORMATTED-OUTPUT TEMP, VEL2_PORT
  LOGFORMAT-OUTPUT TEMP[sF], VEL2_PORT[02]
INSTRUCTION-OUTPUT
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-VEL2_PORT
  OP2 VALUE-02
    COMMENT-; force VELOCITY to zero
    ADDRESS-00E
      LABEL-
  FORMATTED-OUTPUT TEMP, VEL3_PORT
  LOGFORMAT-OUTPUT TEMP[sF], VEL3_PORT[03]
INSTRUCTION-OUTPUT
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-VEL3_PORT
  OP2 VALUE-03
    COMMENT-; force VELOCITY to zero
    ADDRESS-00F
      LABEL-
  FORMATTED-OUTPUT TEMP, VEL4_PORT
  LOGFORMAT-OUTPUT TEMP[sF], VEL4_PORT[04]
INSTRUCTION-OUTPUT
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-VEL4_PORT
  OP2 VALUE-04
    COMMENT-; force VELOCITY to zero
    ADDRESS-010
      LABEL-
  FORMATTED-OUTPUT TEMP, VEL5_PORT
  LOGFORMAT-OUTPUT TEMP[sF], VEL5_PORT[05]
INSTRUCTION-OUTPUT
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-VEL5_PORT
  OP2 VALUE-05
    COMMENT-; force VELOCITY to zero
    ADDRESS-011
      LABEL-
  FORMATTED-OUTPUT TEMP, VEL6_PORT
  LOGFORMAT-OUTPUT TEMP[sF], VEL6_PORT[06]
INSTRUCTION-OUTPUT
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-VEL6_PORT
  OP2 VALUE-06
    COMMENT-; force VELOCITY to zero
    ADDRESS-012
      LABEL-
  FORMATTED-OUTPUT TEMP, VEL7_PORT
  LOGFORMAT-OUTPUT TEMP[sF], VEL7_PORT[07]
INSTRUCTION-OUTPUT
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-VEL7_PORT
  OP2 VALUE-07
    COMMENT-; force VELOCITY to zero
    ADDRESS-013
      LABEL-
  FORMATTED-OUTPUT TEMP, PITCH_WHEEL_LSB_PORT
  LOGFORMAT-OUTPUT TEMP[sF], PITCH_WHEEL_LSB_PORT[F2]
INSTRUCTION-OUTPUT
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-PITCH_WHEEL_LSB_PORT
  OP2 VALUE-F2
    COMMENT-
    ADDRESS-014
      LABEL-
  FORMATTED-OUTPUT TEMP, VOICE_SELECT_PORT
  LOGFORMAT-OUTPUT TEMP[sF], VOICE_SELECT_PORT[F6]
INSTRUCTION-OUTPUT
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-VOICE_SELECT_PORT
  OP2 VALUE-F6
    COMMENT-; for monosynth, set this to zero always.
    ADDRESS-015
      LABEL-
  FORMATTED-STORE TEMP, GATES
  LOGFORMAT-STORE TEMP[sF], GATES[30]
INSTRUCTION-STORE
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-GATES
  OP2 VALUE-30
    COMMENT-; ensure both gates are off at startup.
    ADDRESS-016
      LABEL-
  FORMATTED-STORE TEMP, ROUNDROBIN
  LOGFORMAT-STORE TEMP[sF], ROUNDROBIN[31]
INSTRUCTION-STORE
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-ROUNDROBIN
  OP2 VALUE-31
    COMMENT-
    ADDRESS-017
      LABEL-
  FORMATTED-STORE TEMP, SUS
  LOGFORMAT-STORE TEMP[sF], SUS[32]
INSTRUCTION-STORE
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-SUS
  OP2 VALUE-32
    COMMENT-
    ADDRESS-018
      LABEL-
  FORMATTED-LOAD TEMP, 40
  LOGFORMAT-LOAD TEMP[sF], 40
INSTRUCTION-LOAD
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-40
  OP2 VALUE-40
    COMMENT-
    ADDRESS-019
      LABEL-
  FORMATTED-OUTPUT TEMP, PITCH_WHEEL_MSB_PORT
  LOGFORMAT-OUTPUT TEMP[sF], PITCH_WHEEL_MSB_PORT[F1]
INSTRUCTION-OUTPUT
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-PITCH_WHEEL_MSB_PORT
  OP2 VALUE-F1
    COMMENT-
    ADDRESS-01A
      LABEL-
  FORMATTED-LOAD TEMP, FF
  LOGFORMAT-LOAD TEMP[sF], FF
INSTRUCTION-LOAD
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-FF
  OP2 VALUE-FF
    COMMENT-; set no-keys-down flag
    ADDRESS-01B
      LABEL-
  FORMATTED-STORE TEMP, 00
  LOGFORMAT-STORE TEMP[sF], 00
INSTRUCTION-STORE
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-; store in RAM location 00
    ADDRESS-01C
      LABEL-
  FORMATTED-ENABLE INTERRUPT
  LOGFORMAT-ENABLE INTERRUPT
INSTRUCTION-ENABLE
   OPERAND1-INTERRUPT
  OP1 VALUE-INTERRUPT
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-01D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-01D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-01D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-01D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Wait for and process MIDI Bytes.
    ADDRESS-01D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; This is the main dispatch loop that monitors the ISR's MIDIbyteVALID flag register and MESSAGE_COMPLETE flag.
    ADDRESS-01D
      LABEL-idle
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-01D
      LABEL-
  FORMATTED-INPUT TEMP, MODWHEELSTATE
  LOGFORMAT-INPUT TEMP[sF], MODWHEELSTATE[05]
INSTRUCTION-INPUT
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-MODWHEELSTATE
  OP2 VALUE-05
    COMMENT-
    ADDRESS-01E
      LABEL-
  FORMATTED-TEST FLAGS, MESSAGEcomplete_bit
  LOGFORMAT-TEST FLAGS[sA], MESSAGEcomplete_bit[04]
INSTRUCTION-TEST
   OPERAND1-FLAGS
  OP1 VALUE-sA
   OPERAND2-MESSAGEcomplete_bit
  OP2 VALUE-04
    COMMENT-
    ADDRESS-01F
      LABEL-
  FORMATTED-JUMP NZ, ProcessMessage
  LOGFORMAT-JUMP NZ, ProcessMessage[077]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-ProcessMessage
  OP2 VALUE-077
    COMMENT-
    ADDRESS-020
      LABEL-
  FORMATTED-TEST FLAGS, MIDIbyteAVAILABLE_bit
  LOGFORMAT-TEST FLAGS[sA], MIDIbyteAVAILABLE_bit[01]
INSTRUCTION-TEST
   OPERAND1-FLAGS
  OP1 VALUE-sA
   OPERAND2-MIDIbyteAVAILABLE_bit
  OP2 VALUE-01
    COMMENT-; see if isr set the byte available flag
    ADDRESS-021
      LABEL-
  FORMATTED-JUMP NZ, GetMIDIbyte
  LOGFORMAT-JUMP NZ, GetMIDIbyte[027]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-GetMIDIbyte
  OP2 VALUE-027
    COMMENT-
    ADDRESS-022
      LABEL-
  FORMATTED-TEST FLAGS, TTYbyteAVAILABLE_bit
  LOGFORMAT-TEST FLAGS[sA], TTYbyteAVAILABLE_bit[02]
INSTRUCTION-TEST
   OPERAND1-FLAGS
  OP1 VALUE-sA
   OPERAND2-TTYbyteAVAILABLE_bit
  OP2 VALUE-02
    COMMENT-
    ADDRESS-023
      LABEL-
  FORMATTED-JUMP Z, idle
  LOGFORMAT-JUMP Z, idle[01D]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-idle
  OP2 VALUE-01D
    COMMENT-
    ADDRESS-024
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;GetTTYbyte:
    ADDRESS-024
      LABEL-
  FORMATTED-FETCH MIDIbyte, TTYinputBYTE
  LOGFORMAT-FETCH MIDIbyte[s0], TTYinputBYTE[3F]
INSTRUCTION-FETCH
   OPERAND1-MIDIbyte
  OP1 VALUE-s0
   OPERAND2-TTYinputBYTE
  OP2 VALUE-3F
    COMMENT-
    ADDRESS-025
      LABEL-
  FORMATTED-AND FLAGS, TTYbyteAVAILABLE_clr
  LOGFORMAT-AND FLAGS[sA], TTYbyteAVAILABLE_clr[FD]
INSTRUCTION-AND
   OPERAND1-FLAGS
  OP1 VALUE-sA
   OPERAND2-TTYbyteAVAILABLE_clr
  OP2 VALUE-FD
    COMMENT-; clear the MIDI byte available bit
    ADDRESS-026
      LABEL-
  FORMATTED-JUMP Procbyte
  LOGFORMAT-JUMP Procbyte[029]
INSTRUCTION-JUMP
   OPERAND1-Procbyte
  OP1 VALUE-029
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-027
      LABEL-GetMIDIbyte
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-027
      LABEL-
  FORMATTED-FETCH MIDIbyte, MIDIinputBYTE
  LOGFORMAT-FETCH MIDIbyte[s0], MIDIinputBYTE[3E]
INSTRUCTION-FETCH
   OPERAND1-MIDIbyte
  OP1 VALUE-s0
   OPERAND2-MIDIinputBYTE
  OP2 VALUE-3E
    COMMENT-
    ADDRESS-028
      LABEL-
  FORMATTED-AND FLAGS, MIDIbyteAVAILABLE_clr
  LOGFORMAT-AND FLAGS[sA], MIDIbyteAVAILABLE_clr[FE]
INSTRUCTION-AND
   OPERAND1-FLAGS
  OP1 VALUE-sA
   OPERAND2-MIDIbyteAVAILABLE_clr
  OP2 VALUE-FE
    COMMENT-; clear the MIDI byte available bit
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-029
      LABEL-Procbyte
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; there is a byte to process
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; First test for active sensing byte - nothing but problems, so get rid of it now.
    ADDRESS-029
      LABEL-
  FORMATTED-COMPARE MIDIbyte, FE
  LOGFORMAT-COMPARE MIDIbyte[s0], FE
INSTRUCTION-COMPARE
   OPERAND1-MIDIbyte
  OP1 VALUE-s0
   OPERAND2-FE
  OP2 VALUE-FE
    COMMENT-
    ADDRESS-02A
      LABEL-
  FORMATTED-JUMP Z, idle
  LOGFORMAT-JUMP Z, idle[01D]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-idle
  OP2 VALUE-01D
    COMMENT-
    ADDRESS-02B
      LABEL-
  FORMATTED-TEST MIDIbyte, 80
  LOGFORMAT-TEST MIDIbyte[s0], 80
INSTRUCTION-TEST
   OPERAND1-MIDIbyte
  OP1 VALUE-s0
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-; is high bit set?
    ADDRESS-02C
      LABEL-
  FORMATTED-JUMP NZ, MIDI_STATUS_BYTE
  LOGFORMAT-JUMP NZ, MIDI_STATUS_BYTE[05E]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-MIDI_STATUS_BYTE
  OP2 VALUE-05E
    COMMENT-
    ADDRESS-02D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; We have a data byte because bit 7 is zero.
    ADDRESS-02D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; check if we're in sysex mode:
    ADDRESS-02D
      LABEL-
  FORMATTED-COMPARE SYSEX, 00
  LOGFORMAT-COMPARE SYSEX[sB], 00
INSTRUCTION-COMPARE
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-02E
      LABEL-
  FORMATTED-JUMP Z, PerformanceData
  LOGFORMAT-JUMP Z, PerformanceData[056]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-PerformanceData
  OP2 VALUE-056
    COMMENT-
    ADDRESS-02F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-02F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Deal with sysex message
    ADDRESS-02F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Sysexe is handled with a state machine.  Register SYSEX holds the current state.
    ADDRESS-02F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Setting the state to 7F causes the state machine to ignore the rest of any sysex message
    ADDRESS-02F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; and wait for a F7 byte.
    ADDRESS-02F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-02F
      LABEL-
  FORMATTED-COMPARE SYSEX, 01
  LOGFORMAT-COMPARE SYSEX[sB], 01
INSTRUCTION-COMPARE
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-030
      LABEL-
  FORMATTED-JUMP Z, CheckID
  LOGFORMAT-JUMP Z, CheckID[03D]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-CheckID
  OP2 VALUE-03D
    COMMENT-; check mfr ID
    ADDRESS-031
      LABEL-
  FORMATTED-COMPARE SYSEX, 02
  LOGFORMAT-COMPARE SYSEX[sB], 02
INSTRUCTION-COMPARE
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-
    ADDRESS-032
      LABEL-
  FORMATTED-JUMP Z, ModelNumber
  LOGFORMAT-JUMP Z, ModelNumber[042]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-ModelNumber
  OP2 VALUE-042
    COMMENT-; check model number
    ADDRESS-033
      LABEL-
  FORMATTED-COMPARE SYSEX, 03
  LOGFORMAT-COMPARE SYSEX[sB], 03
INSTRUCTION-COMPARE
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-03
  OP2 VALUE-03
    COMMENT-
    ADDRESS-034
      LABEL-
  FORMATTED-JUMP Z, UnitNumber
  LOGFORMAT-JUMP Z, UnitNumber[047]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-UnitNumber
  OP2 VALUE-047
    COMMENT-; check unit number
    ADDRESS-035
      LABEL-
  FORMATTED-COMPARE SYSEX, 04
  LOGFORMAT-COMPARE SYSEX[sB], 04
INSTRUCTION-COMPARE
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-
    ADDRESS-036
      LABEL-
  FORMATTED-JUMP Z, ParameterAddrMSB
  LOGFORMAT-JUMP Z, ParameterAddrMSB[04C]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-ParameterAddrMSB
  OP2 VALUE-04C
    COMMENT-; set parameter address
    ADDRESS-037
      LABEL-
  FORMATTED-COMPARE SYSEX, 05
  LOGFORMAT-COMPARE SYSEX[sB], 05
INSTRUCTION-COMPARE
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-05
  OP2 VALUE-05
    COMMENT-
    ADDRESS-038
      LABEL-
  FORMATTED-JUMP Z, ParameterAddrLSB
  LOGFORMAT-JUMP Z, ParameterAddrLSB[050]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-ParameterAddrLSB
  OP2 VALUE-050
    COMMENT-
    ADDRESS-039
      LABEL-
  FORMATTED-COMPARE SYSEX, 06
  LOGFORMAT-COMPARE SYSEX[sB], 06
INSTRUCTION-COMPARE
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-06
  OP2 VALUE-06
    COMMENT-
    ADDRESS-03A
      LABEL-
  FORMATTED-JUMP Z, ParameterData
  LOGFORMAT-JUMP Z, ParameterData[053]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-ParameterData
  OP2 VALUE-053
    COMMENT-; set parameter data
    ADDRESS-03B
      LABEL-
  FORMATTED-COMPARE SYSEX, 7F
  LOGFORMAT-COMPARE SYSEX[sB], 7F
INSTRUCTION-COMPARE
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-7F
  OP2 VALUE-7F
    COMMENT-
    ADDRESS-03C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;  JUMP Z, idle                              ; we just jump to idle to simply wait for F7 to turn off sysex mode
    ADDRESS-03C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; above instruction removed because we go idle regardless
    ADDRESS-03C
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-03D
      LABEL-CheckID
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-03D
      LABEL-
  FORMATTED-LOAD SYSEX, 02
  LOGFORMAT-LOAD SYSEX[sB], 02
INSTRUCTION-LOAD
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-; move to next state, check UnitNumber
    ADDRESS-03E
      LABEL-
  FORMATTED-COMPARE MIDIbyte, MFR_ID
  LOGFORMAT-COMPARE MIDIbyte[s0], MFR_ID[7F]
INSTRUCTION-COMPARE
   OPERAND1-MIDIbyte
  OP1 VALUE-s0
   OPERAND2-MFR_ID
  OP2 VALUE-7F
    COMMENT-; this device's mfr ID
    ADDRESS-03F
      LABEL-
  FORMATTED-JUMP Z, idle
  LOGFORMAT-JUMP Z, idle[01D]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-idle
  OP2 VALUE-01D
    COMMENT-; if this is ours, go to idle and wait
    ADDRESS-040
      LABEL-
  FORMATTED-LOAD SYSEX, 7F
  LOGFORMAT-LOAD SYSEX[sB], 7F
INSTRUCTION-LOAD
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-7F
  OP2 VALUE-7F
    COMMENT-; not our message, bypass rest of message.
    ADDRESS-041
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-042
      LABEL-ModelNumber
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-042
      LABEL-
  FORMATTED-LOAD SYSEX, 03
  LOGFORMAT-LOAD SYSEX[sB], 03
INSTRUCTION-LOAD
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-03
  OP2 VALUE-03
    COMMENT-
    ADDRESS-043
      LABEL-
  FORMATTED-COMPARE MIDIbyte, MODEL_NUMBER
  LOGFORMAT-COMPARE MIDIbyte[s0], MODEL_NUMBER[01]
INSTRUCTION-COMPARE
   OPERAND1-MIDIbyte
  OP1 VALUE-s0
   OPERAND2-MODEL_NUMBER
  OP2 VALUE-01
    COMMENT-
    ADDRESS-044
      LABEL-
  FORMATTED-JUMP Z, idle
  LOGFORMAT-JUMP Z, idle[01D]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-idle
  OP2 VALUE-01D
    COMMENT-; if this is ours, go to idle and wait
    ADDRESS-045
      LABEL-
  FORMATTED-LOAD SYSEX, 7F
  LOGFORMAT-LOAD SYSEX[sB], 7F
INSTRUCTION-LOAD
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-7F
  OP2 VALUE-7F
    COMMENT-; not our message, bypass rest of message.
    ADDRESS-046
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-047
      LABEL-UnitNumber
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-047
      LABEL-
  FORMATTED-LOAD SYSEX, 04
  LOGFORMAT-LOAD SYSEX[sB], 04
INSTRUCTION-LOAD
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-; set for parameter addr MSB mode
    ADDRESS-048
      LABEL-
  FORMATTED-COMPARE MIDIbyte, UNIT_NUMBER
  LOGFORMAT-COMPARE MIDIbyte[s0], UNIT_NUMBER[00]
INSTRUCTION-COMPARE
   OPERAND1-MIDIbyte
  OP1 VALUE-s0
   OPERAND2-UNIT_NUMBER
  OP2 VALUE-00
    COMMENT-; compare message type byte, 00=parameter
    ADDRESS-049
      LABEL-
  FORMATTED-JUMP Z, idle
  LOGFORMAT-JUMP Z, idle[01D]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-idle
  OP2 VALUE-01D
    COMMENT-
    ADDRESS-04A
      LABEL-
  FORMATTED-LOAD SYSEX, 7F
  LOGFORMAT-LOAD SYSEX[sB], 7F
INSTRUCTION-LOAD
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-7F
  OP2 VALUE-7F
    COMMENT-; not our message, bypass rest of message.
    ADDRESS-04B
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04C
      LABEL-ParameterAddrMSB
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04C
      LABEL-
  FORMATTED-LOAD SYSEX, 05
  LOGFORMAT-LOAD SYSEX[sB], 05
INSTRUCTION-LOAD
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-05
  OP2 VALUE-05
    COMMENT-; set for parameter addr LSB mode
    ADDRESS-04D
      LABEL-
  FORMATTED-LOAD sE, MIDIbyte
  LOGFORMAT-LOAD sE, MIDIbyte[s0]
INSTRUCTION-LOAD
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-MIDIbyte
  OP2 VALUE-s0
    COMMENT-; get the MSB byte
    ADDRESS-04E
      LABEL-
  FORMATTED-OUTPUT sE, SYSEX_MSB_PORT
  LOGFORMAT-OUTPUT sE, SYSEX_MSB_PORT[E0]
INSTRUCTION-OUTPUT
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-SYSEX_MSB_PORT
  OP2 VALUE-E0
    COMMENT-; store the byte in the external parameter selection hardware
    ADDRESS-04F
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-050
      LABEL-ParameterAddrLSB
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-050
      LABEL-
  FORMATTED-LOAD SYSEX, 06
  LOGFORMAT-LOAD SYSEX[sB], 06
INSTRUCTION-LOAD
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-06
  OP2 VALUE-06
    COMMENT-; set for parameter data mode
    ADDRESS-051
      LABEL-
  FORMATTED-LOAD sE, MIDIbyte
  LOGFORMAT-LOAD sE, MIDIbyte[s0]
INSTRUCTION-LOAD
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-MIDIbyte
  OP2 VALUE-s0
    COMMENT-; save the address byte in sE  NOTE: sE is temporary storage elsewhere, but should be safe here
    ADDRESS-052
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-053
      LABEL-ParameterData
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-053
      LABEL-
  FORMATTED-LOAD SYSEX, 7F
  LOGFORMAT-LOAD SYSEX[sB], 7F
INSTRUCTION-LOAD
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-7F
  OP2 VALUE-7F
    COMMENT-; set to wait for F7
    ADDRESS-054
      LABEL-
  FORMATTED-OUTPUT MIDIbyte, (sE)
  LOGFORMAT-OUTPUT MIDIbyte[s0], (sE)
INSTRUCTION-OUTPUT
   OPERAND1-MIDIbyte
  OP1 VALUE-s0
   OPERAND2-(sE)
  OP2 VALUE-(sE)
    COMMENT-; send data byte to port number in sE (the address byte).
    ADDRESS-055
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-056
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-056
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-056
      LABEL-PerformanceData
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-056
      LABEL-
  FORMATTED-SUB DATAbyteCOUNT, 01
  LOGFORMAT-SUB DATAbyteCOUNT[s4], 01
INSTRUCTION-SUB
   OPERAND1-DATAbyteCOUNT
  OP1 VALUE-s4
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-; decrement...
    ADDRESS-057
      LABEL-
  FORMATTED-JUMP Z, byte2
  LOGFORMAT-JUMP Z, byte2[05A]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-byte2
  OP2 VALUE-05A
    COMMENT-; if equal to 0 now, it was 1, so this is byte2
    ADDRESS-058
      LABEL-
  FORMATTED-LOAD DATAbyte1, MIDIbyte
  LOGFORMAT-LOAD DATAbyte1[s6], MIDIbyte[s0]
INSTRUCTION-LOAD
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-MIDIbyte
  OP2 VALUE-s0
    COMMENT-; save this byte as data byte 1
    ADDRESS-059
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-05A
      LABEL-byte2
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; in all cases, this is the last data byte.  Save it and set MESSAGE_COMPLETE
    ADDRESS-05A
      LABEL-
  FORMATTED-LOAD DATAbyte2, MIDIbyte
  LOGFORMAT-LOAD DATAbyte2[s7], MIDIbyte[s0]
INSTRUCTION-LOAD
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-MIDIbyte
  OP2 VALUE-s0
    COMMENT-; save this byte as data byte 2
    ADDRESS-05B
      LABEL-
  FORMATTED-OR FLAGS, MESSAGEcomplete_set
  LOGFORMAT-OR FLAGS[sA], MESSAGEcomplete_set[04]
INSTRUCTION-OR
   OPERAND1-FLAGS
  OP1 VALUE-sA
   OPERAND2-MESSAGEcomplete_set
  OP2 VALUE-04
    COMMENT-; set message complete bit
    ADDRESS-05C
      LABEL-
  FORMATTED-LOAD DATAbyteCOUNT, DATAbyteCOUNTrunstat
  LOGFORMAT-LOAD DATAbyteCOUNT[s4], DATAbyteCOUNTrunstat[s5]
INSTRUCTION-LOAD
   OPERAND1-DATAbyteCOUNT
  OP1 VALUE-s4
   OPERAND2-DATAbyteCOUNTrunstat
  OP2 VALUE-s5
    COMMENT-; set the count again, next message could be running status data.
    ADDRESS-05D
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-05E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-05E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; This is a status or command byte.
    ADDRESS-05E
      LABEL-MIDI_STATUS_BYTE
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; high bit is set, now determine what sort of message this is
    ADDRESS-05E
      LABEL-
  FORMATTED-LOAD MessageTYPE, MIDIbyte
  LOGFORMAT-LOAD MessageTYPE[s2], MIDIbyte[s0]
INSTRUCTION-LOAD
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-MIDIbyte
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-05F
      LABEL-
  FORMATTED-LOAD MessageCHANNEL, MIDIbyte
  LOGFORMAT-LOAD MessageCHANNEL[s3], MIDIbyte[s0]
INSTRUCTION-LOAD
   OPERAND1-MessageCHANNEL
  OP1 VALUE-s3
   OPERAND2-MIDIbyte
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-060
      LABEL-
  FORMATTED-AND MessageTYPE, F0
  LOGFORMAT-AND MessageTYPE[s2], F0
INSTRUCTION-AND
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-F0
  OP2 VALUE-F0
    COMMENT-; MessageTYPE now contains only upper nybble of MIDI command/status byte.
    ADDRESS-061
      LABEL-
  FORMATTED-AND MessageCHANNEL, 0F
  LOGFORMAT-AND MessageCHANNEL[s3], 0F
INSTRUCTION-AND
   OPERAND1-MessageCHANNEL
  OP1 VALUE-s3
   OPERAND2-0F
  OP2 VALUE-0F
    COMMENT-; MessageCHANNEL contains only the channel nybble
    ADDRESS-062
      LABEL-
  FORMATTED-COMPARE MessageTYPE, K_System
  LOGFORMAT-COMPARE MessageTYPE[s2], K_System[F0]
INSTRUCTION-COMPARE
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-K_System
  OP2 VALUE-F0
    COMMENT-; If high nybble == F, then this is a special message
    ADDRESS-063
      LABEL-
  FORMATTED-JUMP NZ, NotFx
  LOGFORMAT-JUMP NZ, NotFx[06C]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-NotFx
  OP2 VALUE-06C
    COMMENT-
    ADDRESS-064
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; We are here because this byte if Fx
    ADDRESS-064
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; decode and act on other Fx messages here.  For now, it's just a jump to idle
    ADDRESS-064
      LABEL-
  FORMATTED-COMPARE MIDIbyte, F7
  LOGFORMAT-COMPARE MIDIbyte[s0], F7
INSTRUCTION-COMPARE
   OPERAND1-MIDIbyte
  OP1 VALUE-s0
   OPERAND2-F7
  OP2 VALUE-F7
    COMMENT-; end of sysex message
    ADDRESS-065
      LABEL-
  FORMATTED-JUMP NZ, NotF7
  LOGFORMAT-JUMP NZ, NotF7[068]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-NotF7
  OP2 VALUE-068
    COMMENT-
    ADDRESS-066
      LABEL-
  FORMATTED-LOAD SYSEX, 00
  LOGFORMAT-LOAD SYSEX[sB], 00
INSTRUCTION-LOAD
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-; sysex off.
    ADDRESS-067
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-068
      LABEL-NotF7
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-068
      LABEL-
  FORMATTED-COMPARE MIDIbyte, F0
  LOGFORMAT-COMPARE MIDIbyte[s0], F0
INSTRUCTION-COMPARE
   OPERAND1-MIDIbyte
  OP1 VALUE-s0
   OPERAND2-F0
  OP2 VALUE-F0
    COMMENT-; F0 ?  (start of sysex message)
    ADDRESS-069
      LABEL-
  FORMATTED-JUMP NZ, idle
  LOGFORMAT-JUMP NZ, idle[01D]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-idle
  OP2 VALUE-01D
    COMMENT-
    ADDRESS-06A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; We have an F0
    ADDRESS-06A
      LABEL-
  FORMATTED-LOAD SYSEX, 01
  LOGFORMAT-LOAD SYSEX[sB], 01
INSTRUCTION-LOAD
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-; set sysex state flag to check mfr ID
    ADDRESS-06B
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-06C
      LABEL-NotFx
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-06C
      LABEL-
  FORMATTED-LOAD SYSEX, 00
  LOGFORMAT-LOAD SYSEX[sB], 00
INSTRUCTION-LOAD
   OPERAND1-SYSEX
  OP1 VALUE-sB
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-; sysex always goes off on any status byte.
    ADDRESS-06D
      LABEL-
  FORMATTED-LOAD COMMANDbyte, MIDIbyte
  LOGFORMAT-LOAD COMMANDbyte[s9], MIDIbyte[s0]
INSTRUCTION-LOAD
   OPERAND1-COMMANDbyte
  OP1 VALUE-s9
   OPERAND2-MIDIbyte
  OP2 VALUE-s0
    COMMENT-; remember this message's command byte.
    ADDRESS-06E
      LABEL-
  FORMATTED-COMPARE MessageTYPE, K_ProgramChange
  LOGFORMAT-COMPARE MessageTYPE[s2], K_ProgramChange[C0]
INSTRUCTION-COMPARE
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-K_ProgramChange
  OP2 VALUE-C0
    COMMENT-; is this PROGRAM CHANGE ?
    ADDRESS-06F
      LABEL-
  FORMATTED-JUMP Z, ONE_DATA_BYTE
  LOGFORMAT-JUMP Z, ONE_DATA_BYTE[074]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-ONE_DATA_BYTE
  OP2 VALUE-074
    COMMENT-
    ADDRESS-070
      LABEL-
  FORMATTED-COMPARE MessageTYPE, K_ChannelPressure
  LOGFORMAT-COMPARE MessageTYPE[s2], K_ChannelPressure[D0]
INSTRUCTION-COMPARE
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-K_ChannelPressure
  OP2 VALUE-D0
    COMMENT-; is this CHANNEL PRESSURE ?
    ADDRESS-071
      LABEL-
  FORMATTED-JUMP Z, ONE_DATA_BYTE
  LOGFORMAT-JUMP Z, ONE_DATA_BYTE[074]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-ONE_DATA_BYTE
  OP2 VALUE-074
    COMMENT-
    ADDRESS-072
      LABEL-
  FORMATTED-LOAD DATAbyteCOUNT, 02
  LOGFORMAT-LOAD DATAbyteCOUNT[s4], 02
INSTRUCTION-LOAD
   OPERAND1-DATAbyteCOUNT
  OP1 VALUE-s4
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-; If not channel pressure or program change, then 2 bytes of data
    ADDRESS-073
      LABEL-
  FORMATTED-JUMP SetCount
  LOGFORMAT-JUMP SetCount[075]
INSTRUCTION-JUMP
   OPERAND1-SetCount
  OP1 VALUE-075
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-074
      LABEL-ONE_DATA_BYTE
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-074
      LABEL-
  FORMATTED-LOAD DATAbyteCOUNT, 01
  LOGFORMAT-LOAD DATAbyteCOUNT[s4], 01
INSTRUCTION-LOAD
   OPERAND1-DATAbyteCOUNT
  OP1 VALUE-s4
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-075
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; set count source for replenishing DATAbyteCOUNT when no status byte is sent (running status)
    ADDRESS-075
      LABEL-SetCount
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-075
      LABEL-
  FORMATTED-LOAD DATAbyteCOUNTrunstat, DATAbyteCOUNT
  LOGFORMAT-LOAD DATAbyteCOUNTrunstat[s5], DATAbyteCOUNT[s4]
INSTRUCTION-LOAD
   OPERAND1-DATAbyteCOUNTrunstat
  OP1 VALUE-s5
   OPERAND2-DATAbyteCOUNT
  OP2 VALUE-s4
    COMMENT-
    ADDRESS-076
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-077
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-077
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
    ADDRESS-077
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-077
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; A complete message is ready to process...
    ADDRESS-077
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Message type determines the number of data bytes.
    ADDRESS-077
      LABEL-ProcessMessage
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-077
      LABEL-
  FORMATTED-AND FLAGS, MESSAGEcomplete_clr
  LOGFORMAT-AND FLAGS[sA], MESSAGEcomplete_clr[FB]
INSTRUCTION-AND
   OPERAND1-FLAGS
  OP1 VALUE-sA
   OPERAND2-MESSAGEcomplete_clr
  OP2 VALUE-FB
    COMMENT-; clear the message complete flag
    ADDRESS-078
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; See if this is our message.  If not, go idle, if yes, do the message.
    ADDRESS-078
      LABEL-
  FORMATTED-LOAD TEMP, COMMANDbyte
  LOGFORMAT-LOAD TEMP[sF], COMMANDbyte[s9]
INSTRUCTION-LOAD
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-COMMANDbyte
  OP2 VALUE-s9
    COMMENT-; get the current command byte into TEMP
    ADDRESS-079
      LABEL-
  FORMATTED-AND TEMP, 0F
  LOGFORMAT-AND TEMP[sF], 0F
INSTRUCTION-AND
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-0F
  OP2 VALUE-0F
    COMMENT-; isolate only the channel.
    ADDRESS-07A
      LABEL-
  FORMATTED-INPUT sD, SWITCH_PORT
  LOGFORMAT-INPUT sD, SWITCH_PORT[02]
INSTRUCTION-INPUT
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-SWITCH_PORT
  OP2 VALUE-02
    COMMENT-; get current MIDI channel number for this hardware
    ADDRESS-07B
      LABEL-
  FORMATTED-COMPARE sD, TEMP
  LOGFORMAT-COMPARE sD, TEMP[sF]
INSTRUCTION-COMPARE
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-TEMP
  OP2 VALUE-sF
    COMMENT-; compare MIDI channel setting with current running status channel number
    ADDRESS-07C
      LABEL-
  FORMATTED-JUMP NZ, idle
  LOGFORMAT-JUMP NZ, idle[01D]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-idle
  OP2 VALUE-01D
    COMMENT-; JUMP to idle if not our channel number.
    ADDRESS-07D
      LABEL-
  FORMATTED-LOAD RUNNINGstatus, COMMANDbyte
  LOGFORMAT-LOAD RUNNINGstatus[s1], COMMANDbyte[s9]
INSTRUCTION-LOAD
   OPERAND1-RUNNINGstatus
  OP1 VALUE-s1
   OPERAND2-COMMANDbyte
  OP2 VALUE-s9
    COMMENT-; this is a message on my channel so set running status.
    ADDRESS-07E
      LABEL-
  FORMATTED-LOAD MessageTYPE, RUNNINGstatus
  LOGFORMAT-LOAD MessageTYPE[s2], RUNNINGstatus[s1]
INSTRUCTION-LOAD
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-RUNNINGstatus
  OP2 VALUE-s1
    COMMENT-
    ADDRESS-07F
      LABEL-
  FORMATTED-AND MessageTYPE, F0
  LOGFORMAT-AND MessageTYPE[s2], F0
INSTRUCTION-AND
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-F0
  OP2 VALUE-F0
    COMMENT-; get message type nybble
    ADDRESS-080
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; This is where we act on complete messages.
    ADDRESS-080
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; JUMP table of vectors to different message type needs.
    ADDRESS-080
      LABEL-
  FORMATTED-COMPARE MessageTYPE, K_NoteOff
  LOGFORMAT-COMPARE MessageTYPE[s2], K_NoteOff[80]
INSTRUCTION-COMPARE
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-K_NoteOff
  OP2 VALUE-80
    COMMENT-
    ADDRESS-081
      LABEL-
  FORMATTED-JUMP Z, NOTE_OFF
  LOGFORMAT-JUMP Z, NOTE_OFF[08F]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-NOTE_OFF
  OP2 VALUE-08F
    COMMENT-
    ADDRESS-082
      LABEL-
  FORMATTED-COMPARE MessageTYPE, K_NoteOn
  LOGFORMAT-COMPARE MessageTYPE[s2], K_NoteOn[90]
INSTRUCTION-COMPARE
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-K_NoteOn
  OP2 VALUE-90
    COMMENT-
    ADDRESS-083
      LABEL-
  FORMATTED-JUMP Z, NOTE_ON
  LOGFORMAT-JUMP Z, NOTE_ON[08F]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-NOTE_ON
  OP2 VALUE-08F
    COMMENT-
    ADDRESS-084
      LABEL-
  FORMATTED-COMPARE MessageTYPE, K_PolyKeyPressure
  LOGFORMAT-COMPARE MessageTYPE[s2], K_PolyKeyPressure[A0]
INSTRUCTION-COMPARE
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-K_PolyKeyPressure
  OP2 VALUE-A0
    COMMENT-
    ADDRESS-085
      LABEL-
  FORMATTED-JUMP Z, POLY_KEY_PRESSURE
  LOGFORMAT-JUMP Z, POLY_KEY_PRESSURE[14D]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-POLY_KEY_PRESSURE
  OP2 VALUE-14D
    COMMENT-
    ADDRESS-086
      LABEL-
  FORMATTED-COMPARE MessageTYPE, K_ControllerChange
  LOGFORMAT-COMPARE MessageTYPE[s2], K_ControllerChange[B0]
INSTRUCTION-COMPARE
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-K_ControllerChange
  OP2 VALUE-B0
    COMMENT-
    ADDRESS-087
      LABEL-
  FORMATTED-JUMP Z, CONTROLLER_CHANGE
  LOGFORMAT-JUMP Z, CONTROLLER_CHANGE[131]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-CONTROLLER_CHANGE
  OP2 VALUE-131
    COMMENT-
    ADDRESS-088
      LABEL-
  FORMATTED-COMPARE MessageTYPE, K_ProgramChange
  LOGFORMAT-COMPARE MessageTYPE[s2], K_ProgramChange[C0]
INSTRUCTION-COMPARE
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-K_ProgramChange
  OP2 VALUE-C0
    COMMENT-
    ADDRESS-089
      LABEL-
  FORMATTED-JUMP Z, PROGRAM_CHANGE
  LOGFORMAT-JUMP Z, PROGRAM_CHANGE[14D]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-PROGRAM_CHANGE
  OP2 VALUE-14D
    COMMENT-
    ADDRESS-08A
      LABEL-
  FORMATTED-COMPARE MessageTYPE, K_ChannelPressure
  LOGFORMAT-COMPARE MessageTYPE[s2], K_ChannelPressure[D0]
INSTRUCTION-COMPARE
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-K_ChannelPressure
  OP2 VALUE-D0
    COMMENT-
    ADDRESS-08B
      LABEL-
  FORMATTED-JUMP Z, CHANNEL_PRESSURE
  LOGFORMAT-JUMP Z, CHANNEL_PRESSURE[148]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-CHANNEL_PRESSURE
  OP2 VALUE-148
    COMMENT-
    ADDRESS-08C
      LABEL-
  FORMATTED-COMPARE MessageTYPE, K_PitchBend
  LOGFORMAT-COMPARE MessageTYPE[s2], K_PitchBend[E0]
INSTRUCTION-COMPARE
   OPERAND1-MessageTYPE
  OP1 VALUE-s2
   OPERAND2-K_PitchBend
  OP2 VALUE-E0
    COMMENT-
    ADDRESS-08D
      LABEL-
  FORMATTED-JUMP Z, PITCH_BEND
  LOGFORMAT-JUMP Z, PITCH_BEND[14A]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-PITCH_BEND
  OP2 VALUE-14A
    COMMENT-
    ADDRESS-08E
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-; anything else, toss.
    ADDRESS-08F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-08F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-08F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;; This section will:
    ADDRESS-08F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;; toggle the gate signal if it's on.
    ADDRESS-08F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;; turn gate on if it's off.
    ADDRESS-08F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;
    ADDRESS-08F
      LABEL-NOTE_ON
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-08F
      LABEL-NOTE_OFF
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-08F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;SET_SYNTH:
    ADDRESS-08F
      LABEL-
  FORMATTED-INPUT s8, TRANSPOSE
  LOGFORMAT-INPUT s8, TRANSPOSE[03]
INSTRUCTION-INPUT
   OPERAND1-s8
  OP1 VALUE-s8
   OPERAND2-TRANSPOSE
  OP2 VALUE-03
    COMMENT-; sample the value of TRANSPOSE port
    ADDRESS-090
      LABEL-
  FORMATTED-COMPARE DATAbyte2, 00
  LOGFORMAT-COMPARE DATAbyte2[s7], 00
INSTRUCTION-COMPARE
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-; is velocity zero?
    ADDRESS-091
      LABEL-
  FORMATTED-JUMP NZ, PLUCK
  LOGFORMAT-JUMP NZ, PLUCK[0CE]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-PLUCK
  OP2 VALUE-0CE
    COMMENT-; If not, we pluck a string
    ADDRESS-092
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
    ADDRESS-092
      LABEL-RELEASE
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-092
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; "Release" refers to when the synth key is released.
    ADDRESS-092
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Determine to which string the note-off message belongs.
    ADDRESS-092
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The current note numbers are stored in scratch pad RAM
    ADDRESS-092
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; NOTE0 - NOTE7 and velocity values of VEL0 - VEL7
    ADDRESS-092
      LABEL-
  FORMATTED-FETCH sE, GATES
  LOGFORMAT-FETCH sE, GATES[30]
INSTRUCTION-FETCH
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-GATES
  OP2 VALUE-30
    COMMENT-; get current gates state
    ADDRESS-093
      LABEL-TRYREL01
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-093
      LABEL-
  FORMATTED-TEST sE, 01
  LOGFORMAT-TEST sE, 01
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-; is bit 0 on?
    ADDRESS-094
      LABEL-
  FORMATTED-JUMP Z, TRYREL02
  LOGFORMAT-JUMP Z, TRYREL02[098]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-TRYREL02
  OP2 VALUE-098
    COMMENT-
    ADDRESS-095
      LABEL-
  FORMATTED-FETCH sD, NOTE0
  LOGFORMAT-FETCH sD, NOTE0[20]
INSTRUCTION-FETCH
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-NOTE0
  OP2 VALUE-20
    COMMENT-
    ADDRESS-096
      LABEL-
  FORMATTED-COMPARE sD, DATAbyte1
  LOGFORMAT-COMPARE sD, DATAbyte1[s6]
INSTRUCTION-COMPARE
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-DATAbyte1
  OP2 VALUE-s6
    COMMENT-
    ADDRESS-097
      LABEL-
  FORMATTED-JUMP Z, REL0
  LOGFORMAT-JUMP Z, REL0[0BC]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-REL0
  OP2 VALUE-0BC
    COMMENT-
    ADDRESS-098
      LABEL-TRYREL02
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-098
      LABEL-
  FORMATTED-TEST sE, 02
  LOGFORMAT-TEST sE, 02
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-; is bit 1 on?
    ADDRESS-099
      LABEL-
  FORMATTED-JUMP Z, TRYREL04
  LOGFORMAT-JUMP Z, TRYREL04[09D]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-TRYREL04
  OP2 VALUE-09D
    COMMENT-
    ADDRESS-09A
      LABEL-
  FORMATTED-FETCH sD, NOTE1
  LOGFORMAT-FETCH sD, NOTE1[21]
INSTRUCTION-FETCH
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-NOTE1
  OP2 VALUE-21
    COMMENT-
    ADDRESS-09B
      LABEL-
  FORMATTED-COMPARE sD, DATAbyte1
  LOGFORMAT-COMPARE sD, DATAbyte1[s6]
INSTRUCTION-COMPARE
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-DATAbyte1
  OP2 VALUE-s6
    COMMENT-
    ADDRESS-09C
      LABEL-
  FORMATTED-JUMP Z, REL1
  LOGFORMAT-JUMP Z, REL1[0BE]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-REL1
  OP2 VALUE-0BE
    COMMENT-
    ADDRESS-09D
      LABEL-TRYREL04
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-09D
      LABEL-
  FORMATTED-TEST sE, 04
  LOGFORMAT-TEST sE, 04
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-; is bit 2 on?
    ADDRESS-09E
      LABEL-
  FORMATTED-JUMP Z, TRYREL08
  LOGFORMAT-JUMP Z, TRYREL08[0A2]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-TRYREL08
  OP2 VALUE-0A2
    COMMENT-
    ADDRESS-09F
      LABEL-
  FORMATTED-FETCH sD, NOTE2
  LOGFORMAT-FETCH sD, NOTE2[22]
INSTRUCTION-FETCH
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-NOTE2
  OP2 VALUE-22
    COMMENT-
    ADDRESS-0A0
      LABEL-
  FORMATTED-COMPARE sD, DATAbyte1
  LOGFORMAT-COMPARE sD, DATAbyte1[s6]
INSTRUCTION-COMPARE
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-DATAbyte1
  OP2 VALUE-s6
    COMMENT-
    ADDRESS-0A1
      LABEL-
  FORMATTED-JUMP Z, REL2
  LOGFORMAT-JUMP Z, REL2[0C0]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-REL2
  OP2 VALUE-0C0
    COMMENT-
    ADDRESS-0A2
      LABEL-TRYREL08
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0A2
      LABEL-
  FORMATTED-TEST sE, 08
  LOGFORMAT-TEST sE, 08
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-08
  OP2 VALUE-08
    COMMENT-; is bit 3 on?
    ADDRESS-0A3
      LABEL-
  FORMATTED-JUMP Z, TRYREL10
  LOGFORMAT-JUMP Z, TRYREL10[0A7]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-TRYREL10
  OP2 VALUE-0A7
    COMMENT-
    ADDRESS-0A4
      LABEL-
  FORMATTED-FETCH sD, NOTE3
  LOGFORMAT-FETCH sD, NOTE3[23]
INSTRUCTION-FETCH
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-NOTE3
  OP2 VALUE-23
    COMMENT-
    ADDRESS-0A5
      LABEL-
  FORMATTED-COMPARE sD, DATAbyte1
  LOGFORMAT-COMPARE sD, DATAbyte1[s6]
INSTRUCTION-COMPARE
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-DATAbyte1
  OP2 VALUE-s6
    COMMENT-
    ADDRESS-0A6
      LABEL-
  FORMATTED-JUMP Z, REL3
  LOGFORMAT-JUMP Z, REL3[0C2]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-REL3
  OP2 VALUE-0C2
    COMMENT-
    ADDRESS-0A7
      LABEL-TRYREL10
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0A7
      LABEL-
  FORMATTED-TEST sE, 10
  LOGFORMAT-TEST sE, 10
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-10
  OP2 VALUE-10
    COMMENT-; is bit 4 on?
    ADDRESS-0A8
      LABEL-
  FORMATTED-JUMP Z, TRYREL20
  LOGFORMAT-JUMP Z, TRYREL20[0AC]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-TRYREL20
  OP2 VALUE-0AC
    COMMENT-
    ADDRESS-0A9
      LABEL-
  FORMATTED-FETCH sD, NOTE4
  LOGFORMAT-FETCH sD, NOTE4[24]
INSTRUCTION-FETCH
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-NOTE4
  OP2 VALUE-24
    COMMENT-
    ADDRESS-0AA
      LABEL-
  FORMATTED-COMPARE sD, DATAbyte1
  LOGFORMAT-COMPARE sD, DATAbyte1[s6]
INSTRUCTION-COMPARE
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-DATAbyte1
  OP2 VALUE-s6
    COMMENT-
    ADDRESS-0AB
      LABEL-
  FORMATTED-JUMP Z, REL4
  LOGFORMAT-JUMP Z, REL4[0C4]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-REL4
  OP2 VALUE-0C4
    COMMENT-
    ADDRESS-0AC
      LABEL-TRYREL20
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0AC
      LABEL-
  FORMATTED-TEST sE, 20
  LOGFORMAT-TEST sE, 20
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-20
  OP2 VALUE-20
    COMMENT-; is bit 5 on?
    ADDRESS-0AD
      LABEL-
  FORMATTED-JUMP Z, TRYREL40
  LOGFORMAT-JUMP Z, TRYREL40[0B1]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-TRYREL40
  OP2 VALUE-0B1
    COMMENT-
    ADDRESS-0AE
      LABEL-
  FORMATTED-FETCH sD, NOTE5
  LOGFORMAT-FETCH sD, NOTE5[25]
INSTRUCTION-FETCH
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-NOTE5
  OP2 VALUE-25
    COMMENT-
    ADDRESS-0AF
      LABEL-
  FORMATTED-COMPARE sD, DATAbyte1
  LOGFORMAT-COMPARE sD, DATAbyte1[s6]
INSTRUCTION-COMPARE
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-DATAbyte1
  OP2 VALUE-s6
    COMMENT-
    ADDRESS-0B0
      LABEL-
  FORMATTED-JUMP Z, REL5
  LOGFORMAT-JUMP Z, REL5[0C6]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-REL5
  OP2 VALUE-0C6
    COMMENT-
    ADDRESS-0B1
      LABEL-TRYREL40
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0B1
      LABEL-
  FORMATTED-TEST sE, 40
  LOGFORMAT-TEST sE, 40
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-40
  OP2 VALUE-40
    COMMENT-; is bit 6 on?
    ADDRESS-0B2
      LABEL-
  FORMATTED-JUMP Z, TRYREL80
  LOGFORMAT-JUMP Z, TRYREL80[0B6]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-TRYREL80
  OP2 VALUE-0B6
    COMMENT-
    ADDRESS-0B3
      LABEL-
  FORMATTED-FETCH sD, NOTE6
  LOGFORMAT-FETCH sD, NOTE6[26]
INSTRUCTION-FETCH
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-NOTE6
  OP2 VALUE-26
    COMMENT-
    ADDRESS-0B4
      LABEL-
  FORMATTED-COMPARE sD, DATAbyte1
  LOGFORMAT-COMPARE sD, DATAbyte1[s6]
INSTRUCTION-COMPARE
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-DATAbyte1
  OP2 VALUE-s6
    COMMENT-
    ADDRESS-0B5
      LABEL-
  FORMATTED-JUMP Z, REL6
  LOGFORMAT-JUMP Z, REL6[0C8]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-REL6
  OP2 VALUE-0C8
    COMMENT-
    ADDRESS-0B6
      LABEL-TRYREL80
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0B6
      LABEL-
  FORMATTED-TEST sE, 80
  LOGFORMAT-TEST sE, 80
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-; is bit 7 on?
    ADDRESS-0B7
      LABEL-
  FORMATTED-JUMP Z, NONEBUSY
  LOGFORMAT-JUMP Z, NONEBUSY[0BB]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-NONEBUSY
  OP2 VALUE-0BB
    COMMENT-
    ADDRESS-0B8
      LABEL-
  FORMATTED-FETCH sD, NOTE7
  LOGFORMAT-FETCH sD, NOTE7[27]
INSTRUCTION-FETCH
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-NOTE7
  OP2 VALUE-27
    COMMENT-
    ADDRESS-0B9
      LABEL-
  FORMATTED-COMPARE sD, DATAbyte1
  LOGFORMAT-COMPARE sD, DATAbyte1[s6]
INSTRUCTION-COMPARE
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-DATAbyte1
  OP2 VALUE-s6
    COMMENT-
    ADDRESS-0BA
      LABEL-
  FORMATTED-JUMP Z, REL7
  LOGFORMAT-JUMP Z, REL7[0CA]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-REL7
  OP2 VALUE-0CA
    COMMENT-
    ADDRESS-0BB
      LABEL-NONEBUSY
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0BB
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; If we are here, we didn't find the current note number in the strings note number table
    ADDRESS-0BB
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-; What else can I do?
    ADDRESS-0BC
      LABEL-REL0
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0BC
      LABEL-
  FORMATTED-AND sE, FE
  LOGFORMAT-AND sE, FE
INSTRUCTION-AND
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-FE
  OP2 VALUE-FE
    COMMENT-; sE has new GATES value
    ADDRESS-0BD
      LABEL-
  FORMATTED-JUMP relsave
  LOGFORMAT-JUMP relsave[0CB]
INSTRUCTION-JUMP
   OPERAND1-relsave
  OP1 VALUE-0CB
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0BE
      LABEL-REL1
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0BE
      LABEL-
  FORMATTED-AND sE, FD
  LOGFORMAT-AND sE, FD
INSTRUCTION-AND
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-FD
  OP2 VALUE-FD
    COMMENT-; sE has new GATES value
    ADDRESS-0BF
      LABEL-
  FORMATTED-JUMP relsave
  LOGFORMAT-JUMP relsave[0CB]
INSTRUCTION-JUMP
   OPERAND1-relsave
  OP1 VALUE-0CB
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C0
      LABEL-REL2
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C0
      LABEL-
  FORMATTED-AND sE, FB
  LOGFORMAT-AND sE, FB
INSTRUCTION-AND
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-FB
  OP2 VALUE-FB
    COMMENT-; sE has new GATES value
    ADDRESS-0C1
      LABEL-
  FORMATTED-JUMP relsave
  LOGFORMAT-JUMP relsave[0CB]
INSTRUCTION-JUMP
   OPERAND1-relsave
  OP1 VALUE-0CB
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C2
      LABEL-REL3
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C2
      LABEL-
  FORMATTED-AND sE, F7
  LOGFORMAT-AND sE, F7
INSTRUCTION-AND
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-F7
  OP2 VALUE-F7
    COMMENT-; sE has new GATES value
    ADDRESS-0C3
      LABEL-
  FORMATTED-JUMP relsave
  LOGFORMAT-JUMP relsave[0CB]
INSTRUCTION-JUMP
   OPERAND1-relsave
  OP1 VALUE-0CB
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C4
      LABEL-REL4
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C4
      LABEL-
  FORMATTED-AND sE, EF
  LOGFORMAT-AND sE, EF
INSTRUCTION-AND
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-EF
  OP2 VALUE-EF
    COMMENT-; sE has new GATES value
    ADDRESS-0C5
      LABEL-
  FORMATTED-JUMP relsave
  LOGFORMAT-JUMP relsave[0CB]
INSTRUCTION-JUMP
   OPERAND1-relsave
  OP1 VALUE-0CB
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C6
      LABEL-REL5
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C6
      LABEL-
  FORMATTED-AND sE, DF
  LOGFORMAT-AND sE, DF
INSTRUCTION-AND
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-DF
  OP2 VALUE-DF
    COMMENT-; sE has new GATES value
    ADDRESS-0C7
      LABEL-
  FORMATTED-JUMP relsave
  LOGFORMAT-JUMP relsave[0CB]
INSTRUCTION-JUMP
   OPERAND1-relsave
  OP1 VALUE-0CB
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C8
      LABEL-REL6
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C8
      LABEL-
  FORMATTED-AND sE, BF
  LOGFORMAT-AND sE, BF
INSTRUCTION-AND
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-BF
  OP2 VALUE-BF
    COMMENT-; sE has new GATES value
    ADDRESS-0C9
      LABEL-
  FORMATTED-JUMP relsave
  LOGFORMAT-JUMP relsave[0CB]
INSTRUCTION-JUMP
   OPERAND1-relsave
  OP1 VALUE-0CB
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0CA
      LABEL-REL7
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0CA
      LABEL-
  FORMATTED-AND sE, 7F
  LOGFORMAT-AND sE, 7F
INSTRUCTION-AND
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-7F
  OP2 VALUE-7F
    COMMENT-; sE has new GATES value
    ADDRESS-0CB
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;  JUMP relsave  ; not necessary
    ADDRESS-0CB
      LABEL-relsave
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; save the new GATES state upon release
    ADDRESS-0CB
      LABEL-
  FORMATTED-STORE sE, GATES
  LOGFORMAT-STORE sE, GATES[30]
INSTRUCTION-STORE
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-GATES
  OP2 VALUE-30
    COMMENT-; update SP RAM
    ADDRESS-0CC
      LABEL-
  FORMATTED-OUTPUT sE, GATE_PORT
  LOGFORMAT-OUTPUT sE, GATE_PORT[13]
INSTRUCTION-OUTPUT
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-GATE_PORT
  OP2 VALUE-13
    COMMENT-; update synth hardware
    ADDRESS-0CD
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-; finished processing the note-off
    ADDRESS-0CE
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
    ADDRESS-0CE
      LABEL-PLUCK
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0CE
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; determine which string to use
    ADDRESS-0CE
      LABEL-
  FORMATTED-FETCH TEMP, SUS
  LOGFORMAT-FETCH TEMP[sF], SUS[32]
INSTRUCTION-FETCH
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-SUS
  OP2 VALUE-32
    COMMENT-; Check sustain pedal state
    ADDRESS-0CF
      LABEL-
  FORMATTED-COMPARE TEMP, 00
  LOGFORMAT-COMPARE TEMP[sF], 00
INSTRUCTION-COMPARE
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-; note: FETCH instruction does not change flags
    ADDRESS-0D0
      LABEL-
  FORMATTED-JUMP Z, PEDALUP
  LOGFORMAT-JUMP Z, PEDALUP[0D3]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-PEDALUP
  OP2 VALUE-0D3
    COMMENT-
    ADDRESS-0D1
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The pedal is held down.  So first try to use an inactive voice before stealing
    ADDRESS-0D1
      LABEL-
  FORMATTED-INPUT TEMP, ACTIVE
  LOGFORMAT-INPUT TEMP[sF], ACTIVE[06]
INSTRUCTION-INPUT
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-ACTIVE
  OP2 VALUE-06
    COMMENT-; get vibrational state of all strings
    ADDRESS-0D2
      LABEL-
  FORMATTED-JUMP STRINGTEST
  LOGFORMAT-JUMP STRINGTEST[0D4]
INSTRUCTION-JUMP
   OPERAND1-STRINGTEST
  OP1 VALUE-0D4
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0D3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; First look for an unused voice by checking for unbusy voices.
    ADDRESS-0D3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; This needs to take into account that some keys can be held down
    ADDRESS-0D3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; and should not be stolen if there are any unbusy voices.
    ADDRESS-0D3
      LABEL-PEDALUP
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0D3
      LABEL-
  FORMATTED-FETCH TEMP, GATES
  LOGFORMAT-FETCH TEMP[sF], GATES[30]
INSTRUCTION-FETCH
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-GATES
  OP2 VALUE-30
    COMMENT-; first get the state of the gates.
    ADDRESS-0D4
      LABEL-STRINGTEST
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0D4
      LABEL-
  FORMATTED-TEST TEMP, 01
  LOGFORMAT-TEST TEMP[sF], 01
INSTRUCTION-TEST
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-; check if this voice is a held key
    ADDRESS-0D5
      LABEL-
  FORMATTED-JUMP Z, PLUCK0
  LOGFORMAT-JUMP Z, PLUCK0[0FA]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-PLUCK0
  OP2 VALUE-0FA
    COMMENT-; voice is idle, pluck it.
    ADDRESS-0D6
      LABEL-
  FORMATTED-TEST TEMP, 02
  LOGFORMAT-TEST TEMP[sF], 02
INSTRUCTION-TEST
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-; check if this voice is a held key
    ADDRESS-0D7
      LABEL-
  FORMATTED-JUMP Z, PLUCK1
  LOGFORMAT-JUMP Z, PLUCK1[100]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-PLUCK1
  OP2 VALUE-100
    COMMENT-; voice is idle, pluck it.
    ADDRESS-0D8
      LABEL-
  FORMATTED-TEST TEMP, 04
  LOGFORMAT-TEST TEMP[sF], 04
INSTRUCTION-TEST
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-; check if this voice is a held key
    ADDRESS-0D9
      LABEL-
  FORMATTED-JUMP Z, PLUCK2
  LOGFORMAT-JUMP Z, PLUCK2[106]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-PLUCK2
  OP2 VALUE-106
    COMMENT-; voice is idle, pluck it.
    ADDRESS-0DA
      LABEL-
  FORMATTED-TEST TEMP, 08
  LOGFORMAT-TEST TEMP[sF], 08
INSTRUCTION-TEST
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-08
  OP2 VALUE-08
    COMMENT-; check if this voice is a held key
    ADDRESS-0DB
      LABEL-
  FORMATTED-JUMP Z, PLUCK3
  LOGFORMAT-JUMP Z, PLUCK3[10C]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-PLUCK3
  OP2 VALUE-10C
    COMMENT-; voice is idle, pluck it.
    ADDRESS-0DC
      LABEL-
  FORMATTED-TEST TEMP, 10
  LOGFORMAT-TEST TEMP[sF], 10
INSTRUCTION-TEST
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-10
  OP2 VALUE-10
    COMMENT-; check if this voice is a held key
    ADDRESS-0DD
      LABEL-
  FORMATTED-JUMP Z, PLUCK4
  LOGFORMAT-JUMP Z, PLUCK4[112]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-PLUCK4
  OP2 VALUE-112
    COMMENT-; voice is idle, pluck it.
    ADDRESS-0DE
      LABEL-
  FORMATTED-TEST TEMP, 20
  LOGFORMAT-TEST TEMP[sF], 20
INSTRUCTION-TEST
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-20
  OP2 VALUE-20
    COMMENT-; check if this voice is a held key
    ADDRESS-0DF
      LABEL-
  FORMATTED-JUMP Z, PLUCK5
  LOGFORMAT-JUMP Z, PLUCK5[118]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-PLUCK5
  OP2 VALUE-118
    COMMENT-; voice is idle, pluck it.
    ADDRESS-0E0
      LABEL-
  FORMATTED-TEST TEMP, 40
  LOGFORMAT-TEST TEMP[sF], 40
INSTRUCTION-TEST
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-40
  OP2 VALUE-40
    COMMENT-; check if this voice is a held key
    ADDRESS-0E1
      LABEL-
  FORMATTED-JUMP Z, PLUCK6
  LOGFORMAT-JUMP Z, PLUCK6[11E]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-PLUCK6
  OP2 VALUE-11E
    COMMENT-; voice is idle, pluck it.
    ADDRESS-0E2
      LABEL-
  FORMATTED-TEST TEMP, 80
  LOGFORMAT-TEST TEMP[sF], 80
INSTRUCTION-TEST
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-; check if this voice is a held key
    ADDRESS-0E3
      LABEL-
  FORMATTED-JUMP Z, PLUCK7
  LOGFORMAT-JUMP Z, PLUCK7[124]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-PLUCK7
  OP2 VALUE-124
    COMMENT-; voice is idle, pluck it.
    ADDRESS-0E4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; If we fall through to here, all voices are busy.
    ADDRESS-0E4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; assign with round robin when all voices are busy
    ADDRESS-0E4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; This algorithm will steal a voice that is already busy
    ADDRESS-0E4
      LABEL-
  FORMATTED-FETCH sE, ROUNDROBIN
  LOGFORMAT-FETCH sE, ROUNDROBIN[31]
INSTRUCTION-FETCH
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-ROUNDROBIN
  OP2 VALUE-31
    COMMENT-
    ADDRESS-0E5
      LABEL-
  FORMATTED-JUMP Z, RR1
  LOGFORMAT-JUMP Z, RR1[0F8]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-RR1
  OP2 VALUE-0F8
    COMMENT-; if zero, go load a 01
    ADDRESS-0E6
      LABEL-
  FORMATTED-SL0 sE
  LOGFORMAT-SL0 sE
INSTRUCTION-SL0
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-
  OP2 VALUE-
    COMMENT-; shift left for next cycle
    ADDRESS-0E7
      LABEL-
  FORMATTED-STORE sE, ROUNDROBIN
  LOGFORMAT-STORE sE, ROUNDROBIN[31]
INSTRUCTION-STORE
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-ROUNDROBIN
  OP2 VALUE-31
    COMMENT-; store for next cycle - hence "round robin"
    ADDRESS-0E8
      LABEL-
  FORMATTED-TEST sE, 01
  LOGFORMAT-TEST sE, 01
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-; sE contains string to be plucked, check each
    ADDRESS-0E9
      LABEL-
  FORMATTED-JUMP NZ, PLUCK0
  LOGFORMAT-JUMP NZ, PLUCK0[0FA]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-PLUCK0
  OP2 VALUE-0FA
    COMMENT-; string bit for 1 and vector to the pluck code for it.
    ADDRESS-0EA
      LABEL-
  FORMATTED-TEST sE, 02
  LOGFORMAT-TEST sE, 02
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-
    ADDRESS-0EB
      LABEL-
  FORMATTED-JUMP NZ, PLUCK1
  LOGFORMAT-JUMP NZ, PLUCK1[100]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-PLUCK1
  OP2 VALUE-100
    COMMENT-
    ADDRESS-0EC
      LABEL-
  FORMATTED-TEST sE, 04
  LOGFORMAT-TEST sE, 04
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-
    ADDRESS-0ED
      LABEL-
  FORMATTED-JUMP NZ, PLUCK2
  LOGFORMAT-JUMP NZ, PLUCK2[106]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-PLUCK2
  OP2 VALUE-106
    COMMENT-
    ADDRESS-0EE
      LABEL-
  FORMATTED-TEST sE, 08
  LOGFORMAT-TEST sE, 08
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-08
  OP2 VALUE-08
    COMMENT-
    ADDRESS-0EF
      LABEL-
  FORMATTED-JUMP NZ, PLUCK3
  LOGFORMAT-JUMP NZ, PLUCK3[10C]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-PLUCK3
  OP2 VALUE-10C
    COMMENT-
    ADDRESS-0F0
      LABEL-
  FORMATTED-TEST sE, 10
  LOGFORMAT-TEST sE, 10
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-10
  OP2 VALUE-10
    COMMENT-
    ADDRESS-0F1
      LABEL-
  FORMATTED-JUMP NZ, PLUCK4
  LOGFORMAT-JUMP NZ, PLUCK4[112]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-PLUCK4
  OP2 VALUE-112
    COMMENT-
    ADDRESS-0F2
      LABEL-
  FORMATTED-TEST sE, 20
  LOGFORMAT-TEST sE, 20
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-20
  OP2 VALUE-20
    COMMENT-
    ADDRESS-0F3
      LABEL-
  FORMATTED-JUMP NZ, PLUCK5
  LOGFORMAT-JUMP NZ, PLUCK5[118]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-PLUCK5
  OP2 VALUE-118
    COMMENT-
    ADDRESS-0F4
      LABEL-
  FORMATTED-TEST sE, 40
  LOGFORMAT-TEST sE, 40
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-40
  OP2 VALUE-40
    COMMENT-
    ADDRESS-0F5
      LABEL-
  FORMATTED-JUMP NZ, PLUCK6
  LOGFORMAT-JUMP NZ, PLUCK6[11E]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-PLUCK6
  OP2 VALUE-11E
    COMMENT-
    ADDRESS-0F6
      LABEL-
  FORMATTED-TEST sE, 80
  LOGFORMAT-TEST sE, 80
INSTRUCTION-TEST
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-
    ADDRESS-0F7
      LABEL-
  FORMATTED-JUMP NZ, PLUCK7
  LOGFORMAT-JUMP NZ, PLUCK7[124]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-PLUCK7
  OP2 VALUE-124
    COMMENT-
    ADDRESS-0F8
      LABEL-RR1
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0F8
      LABEL-
  FORMATTED-LOAD sE, 01
  LOGFORMAT-LOAD sE, 01
INSTRUCTION-LOAD
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-; load a one
    ADDRESS-0F9
      LABEL-
  FORMATTED-STORE sE, ROUNDROBIN
  LOGFORMAT-STORE sE, ROUNDROBIN[31]
INSTRUCTION-STORE
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-ROUNDROBIN
  OP2 VALUE-31
    COMMENT-;   into ROUNDROBIN.
    ADDRESS-0FA
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;  JUMP PLUCK0   ; jump not necessary, fall through                ; use string 0
    ADDRESS-0FA
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; send note data to string we will pluck
    ADDRESS-0FA
      LABEL-PLUCK0
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0FA
      LABEL-
  FORMATTED-STORE DATAbyte1, NOTE0
  LOGFORMAT-STORE DATAbyte1[s6], NOTE0[20]
INSTRUCTION-STORE
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE0
  OP2 VALUE-20
    COMMENT-; save note value in SP RAM
    ADDRESS-0FB
      LABEL-
  FORMATTED-SUB DATAbyte1, s8
  LOGFORMAT-SUB DATAbyte1[s6], s8
INSTRUCTION-SUB
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-s8
  OP2 VALUE-s8
    COMMENT-
    ADDRESS-0FC
      LABEL-
  FORMATTED-OUTPUT DATAbyte1, NOTE0_PORT
  LOGFORMAT-OUTPUT DATAbyte1[s6], NOTE0_PORT[08]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE0_PORT
  OP2 VALUE-08
    COMMENT-
    ADDRESS-0FD
      LABEL-
  FORMATTED-OUTPUT DATAbyte2, VEL0_PORT
  LOGFORMAT-OUTPUT DATAbyte2[s7], VEL0_PORT[00]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-VEL0_PORT
  OP2 VALUE-00
    COMMENT-
    ADDRESS-0FE
      LABEL-
  FORMATTED-LOAD TEMP, 01
  LOGFORMAT-LOAD TEMP[sF], 01
INSTRUCTION-LOAD
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-; set gate flag bit 0, use string 0
    ADDRESS-0FF
      LABEL-
  FORMATTED-JUMP SendGATE
  LOGFORMAT-JUMP SendGATE[129]
INSTRUCTION-JUMP
   OPERAND1-SendGATE
  OP1 VALUE-129
   OPERAND2-
  OP2 VALUE-
    COMMENT-; go sent the gate on signal
    ADDRESS-100
      LABEL-PLUCK1
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-100
      LABEL-
  FORMATTED-STORE DATAbyte1, NOTE1
  LOGFORMAT-STORE DATAbyte1[s6], NOTE1[21]
INSTRUCTION-STORE
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE1
  OP2 VALUE-21
    COMMENT-
    ADDRESS-101
      LABEL-
  FORMATTED-SUB DATAbyte1, s8
  LOGFORMAT-SUB DATAbyte1[s6], s8
INSTRUCTION-SUB
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-s8
  OP2 VALUE-s8
    COMMENT-
    ADDRESS-102
      LABEL-
  FORMATTED-OUTPUT DATAbyte1, NOTE1_PORT
  LOGFORMAT-OUTPUT DATAbyte1[s6], NOTE1_PORT[09]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE1_PORT
  OP2 VALUE-09
    COMMENT-; update string 1 note value
    ADDRESS-103
      LABEL-
  FORMATTED-OUTPUT DATAbyte2, VEL1_PORT
  LOGFORMAT-OUTPUT DATAbyte2[s7], VEL1_PORT[01]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-VEL1_PORT
  OP2 VALUE-01
    COMMENT-
    ADDRESS-104
      LABEL-
  FORMATTED-LOAD TEMP, 02
  LOGFORMAT-LOAD TEMP[sF], 02
INSTRUCTION-LOAD
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-; set gate flag bit 2, use string 1
    ADDRESS-105
      LABEL-
  FORMATTED-JUMP SendGATE
  LOGFORMAT-JUMP SendGATE[129]
INSTRUCTION-JUMP
   OPERAND1-SendGATE
  OP1 VALUE-129
   OPERAND2-
  OP2 VALUE-
    COMMENT-; go sent the gate on signal
    ADDRESS-106
      LABEL-PLUCK2
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-106
      LABEL-
  FORMATTED-STORE DATAbyte1, NOTE2
  LOGFORMAT-STORE DATAbyte1[s6], NOTE2[22]
INSTRUCTION-STORE
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE2
  OP2 VALUE-22
    COMMENT-
    ADDRESS-107
      LABEL-
  FORMATTED-SUB DATAbyte1, s8
  LOGFORMAT-SUB DATAbyte1[s6], s8
INSTRUCTION-SUB
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-s8
  OP2 VALUE-s8
    COMMENT-
    ADDRESS-108
      LABEL-
  FORMATTED-OUTPUT DATAbyte1, NOTE2_PORT
  LOGFORMAT-OUTPUT DATAbyte1[s6], NOTE2_PORT[0A]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE2_PORT
  OP2 VALUE-0A
    COMMENT-; update string 2 note value
    ADDRESS-109
      LABEL-
  FORMATTED-OUTPUT DATAbyte2, VEL2_PORT
  LOGFORMAT-OUTPUT DATAbyte2[s7], VEL2_PORT[02]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-VEL2_PORT
  OP2 VALUE-02
    COMMENT-
    ADDRESS-10A
      LABEL-
  FORMATTED-LOAD TEMP, 04
  LOGFORMAT-LOAD TEMP[sF], 04
INSTRUCTION-LOAD
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-; set gate flag bit 4, use string 2
    ADDRESS-10B
      LABEL-
  FORMATTED-JUMP SendGATE
  LOGFORMAT-JUMP SendGATE[129]
INSTRUCTION-JUMP
   OPERAND1-SendGATE
  OP1 VALUE-129
   OPERAND2-
  OP2 VALUE-
    COMMENT-; go sent the gate on signal
    ADDRESS-10C
      LABEL-PLUCK3
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-10C
      LABEL-
  FORMATTED-STORE DATAbyte1, NOTE3
  LOGFORMAT-STORE DATAbyte1[s6], NOTE3[23]
INSTRUCTION-STORE
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE3
  OP2 VALUE-23
    COMMENT-
    ADDRESS-10D
      LABEL-
  FORMATTED-SUB DATAbyte1, s8
  LOGFORMAT-SUB DATAbyte1[s6], s8
INSTRUCTION-SUB
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-s8
  OP2 VALUE-s8
    COMMENT-
    ADDRESS-10E
      LABEL-
  FORMATTED-OUTPUT DATAbyte1, NOTE3_PORT
  LOGFORMAT-OUTPUT DATAbyte1[s6], NOTE3_PORT[0B]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE3_PORT
  OP2 VALUE-0B
    COMMENT-; update string 3 note value
    ADDRESS-10F
      LABEL-
  FORMATTED-OUTPUT DATAbyte2, VEL3_PORT
  LOGFORMAT-OUTPUT DATAbyte2[s7], VEL3_PORT[03]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-VEL3_PORT
  OP2 VALUE-03
    COMMENT-
    ADDRESS-110
      LABEL-
  FORMATTED-LOAD TEMP, 08
  LOGFORMAT-LOAD TEMP[sF], 08
INSTRUCTION-LOAD
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-08
  OP2 VALUE-08
    COMMENT-; set gate flag bit 8, use string 3
    ADDRESS-111
      LABEL-
  FORMATTED-JUMP SendGATE
  LOGFORMAT-JUMP SendGATE[129]
INSTRUCTION-JUMP
   OPERAND1-SendGATE
  OP1 VALUE-129
   OPERAND2-
  OP2 VALUE-
    COMMENT-; go sent the gate on signal
    ADDRESS-112
      LABEL-PLUCK4
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-112
      LABEL-
  FORMATTED-STORE DATAbyte1, NOTE4
  LOGFORMAT-STORE DATAbyte1[s6], NOTE4[24]
INSTRUCTION-STORE
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE4
  OP2 VALUE-24
    COMMENT-
    ADDRESS-113
      LABEL-
  FORMATTED-SUB DATAbyte1, s8
  LOGFORMAT-SUB DATAbyte1[s6], s8
INSTRUCTION-SUB
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-s8
  OP2 VALUE-s8
    COMMENT-
    ADDRESS-114
      LABEL-
  FORMATTED-OUTPUT DATAbyte1, NOTE4_PORT
  LOGFORMAT-OUTPUT DATAbyte1[s6], NOTE4_PORT[0C]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE4_PORT
  OP2 VALUE-0C
    COMMENT-; update string 4 note value
    ADDRESS-115
      LABEL-
  FORMATTED-OUTPUT DATAbyte2, VEL4_PORT
  LOGFORMAT-OUTPUT DATAbyte2[s7], VEL4_PORT[04]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-VEL4_PORT
  OP2 VALUE-04
    COMMENT-
    ADDRESS-116
      LABEL-
  FORMATTED-LOAD TEMP, 10
  LOGFORMAT-LOAD TEMP[sF], 10
INSTRUCTION-LOAD
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-10
  OP2 VALUE-10
    COMMENT-; set gate flag bit 10, use string 3
    ADDRESS-117
      LABEL-
  FORMATTED-JUMP SendGATE
  LOGFORMAT-JUMP SendGATE[129]
INSTRUCTION-JUMP
   OPERAND1-SendGATE
  OP1 VALUE-129
   OPERAND2-
  OP2 VALUE-
    COMMENT-; go sent the gate on signal
    ADDRESS-118
      LABEL-PLUCK5
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-118
      LABEL-
  FORMATTED-STORE DATAbyte1, NOTE5
  LOGFORMAT-STORE DATAbyte1[s6], NOTE5[25]
INSTRUCTION-STORE
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE5
  OP2 VALUE-25
    COMMENT-
    ADDRESS-119
      LABEL-
  FORMATTED-SUB DATAbyte1, s8
  LOGFORMAT-SUB DATAbyte1[s6], s8
INSTRUCTION-SUB
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-s8
  OP2 VALUE-s8
    COMMENT-
    ADDRESS-11A
      LABEL-
  FORMATTED-OUTPUT DATAbyte1, NOTE5_PORT
  LOGFORMAT-OUTPUT DATAbyte1[s6], NOTE5_PORT[0D]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE5_PORT
  OP2 VALUE-0D
    COMMENT-; update string 5 note value
    ADDRESS-11B
      LABEL-
  FORMATTED-OUTPUT DATAbyte2, VEL5_PORT
  LOGFORMAT-OUTPUT DATAbyte2[s7], VEL5_PORT[05]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-VEL5_PORT
  OP2 VALUE-05
    COMMENT-
    ADDRESS-11C
      LABEL-
  FORMATTED-LOAD TEMP, 20
  LOGFORMAT-LOAD TEMP[sF], 20
INSTRUCTION-LOAD
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-20
  OP2 VALUE-20
    COMMENT-; set gate flag bit 20 use string 3
    ADDRESS-11D
      LABEL-
  FORMATTED-JUMP SendGATE
  LOGFORMAT-JUMP SendGATE[129]
INSTRUCTION-JUMP
   OPERAND1-SendGATE
  OP1 VALUE-129
   OPERAND2-
  OP2 VALUE-
    COMMENT-; go sent the gate on signal
    ADDRESS-11E
      LABEL-PLUCK6
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-11E
      LABEL-
  FORMATTED-STORE DATAbyte1, NOTE6
  LOGFORMAT-STORE DATAbyte1[s6], NOTE6[26]
INSTRUCTION-STORE
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE6
  OP2 VALUE-26
    COMMENT-
    ADDRESS-11F
      LABEL-
  FORMATTED-SUB DATAbyte1, s8
  LOGFORMAT-SUB DATAbyte1[s6], s8
INSTRUCTION-SUB
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-s8
  OP2 VALUE-s8
    COMMENT-
    ADDRESS-120
      LABEL-
  FORMATTED-OUTPUT DATAbyte1, NOTE6_PORT
  LOGFORMAT-OUTPUT DATAbyte1[s6], NOTE6_PORT[0E]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE6_PORT
  OP2 VALUE-0E
    COMMENT-; update string 6 note value
    ADDRESS-121
      LABEL-
  FORMATTED-OUTPUT DATAbyte2, VEL6_PORT
  LOGFORMAT-OUTPUT DATAbyte2[s7], VEL6_PORT[06]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-VEL6_PORT
  OP2 VALUE-06
    COMMENT-
    ADDRESS-122
      LABEL-
  FORMATTED-LOAD TEMP, 40
  LOGFORMAT-LOAD TEMP[sF], 40
INSTRUCTION-LOAD
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-40
  OP2 VALUE-40
    COMMENT-; set gate flag bit 40use string 3
    ADDRESS-123
      LABEL-
  FORMATTED-JUMP SendGATE
  LOGFORMAT-JUMP SendGATE[129]
INSTRUCTION-JUMP
   OPERAND1-SendGATE
  OP1 VALUE-129
   OPERAND2-
  OP2 VALUE-
    COMMENT-; go sent the gate on signal
    ADDRESS-124
      LABEL-PLUCK7
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-124
      LABEL-
  FORMATTED-STORE DATAbyte1, NOTE7
  LOGFORMAT-STORE DATAbyte1[s6], NOTE7[27]
INSTRUCTION-STORE
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE7
  OP2 VALUE-27
    COMMENT-
    ADDRESS-125
      LABEL-
  FORMATTED-SUB DATAbyte1, s8
  LOGFORMAT-SUB DATAbyte1[s6], s8
INSTRUCTION-SUB
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-s8
  OP2 VALUE-s8
    COMMENT-
    ADDRESS-126
      LABEL-
  FORMATTED-OUTPUT DATAbyte1, NOTE7_PORT
  LOGFORMAT-OUTPUT DATAbyte1[s6], NOTE7_PORT[0F]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-NOTE7_PORT
  OP2 VALUE-0F
    COMMENT-; update string 7 note value
    ADDRESS-127
      LABEL-
  FORMATTED-OUTPUT DATAbyte2, VEL7_PORT
  LOGFORMAT-OUTPUT DATAbyte2[s7], VEL7_PORT[07]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-VEL7_PORT
  OP2 VALUE-07
    COMMENT-
    ADDRESS-128
      LABEL-
  FORMATTED-LOAD TEMP, 80
  LOGFORMAT-LOAD TEMP[sF], 80
INSTRUCTION-LOAD
   OPERAND1-TEMP
  OP1 VALUE-sF
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-; set gate flag bit 80 use string 3
    ADDRESS-129
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;  JUMP SendGATE   ; fall through                            ; go sent the gate on signal
    ADDRESS-129
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; TEMP now contains a single bit which represents the gate to turn on.
    ADDRESS-129
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-129
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; First force the gate in question off, XOR the pluck bit in TEMP with GATES, then
    ADDRESS-129
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; send the byte to gates.  If the GATES bit was on, it will go off.  If it was off
    ADDRESS-129
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; it will go on.  In the second case, the second OUTPUT instruction doesn't matter
    ADDRESS-129
      LABEL-SendGATE
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-129
      LABEL-
  FORMATTED-FETCH sD, GATES
  LOGFORMAT-FETCH sD, GATES[30]
INSTRUCTION-FETCH
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-GATES
  OP2 VALUE-30
    COMMENT-; get current gates state
    ADDRESS-12A
      LABEL-
  FORMATTED-LOAD sE, TEMP
  LOGFORMAT-LOAD sE, TEMP[sF]
INSTRUCTION-LOAD
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-TEMP
  OP2 VALUE-sF
    COMMENT-; copy the gate bit to turn on into sE for inversion
    ADDRESS-12B
      LABEL-
  FORMATTED-XOR sE, sD
  LOGFORMAT-XOR sE, sD
INSTRUCTION-XOR
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-sD
  OP2 VALUE-sD
    COMMENT-; XOR the pluck bit in TEMP with GATES
    ADDRESS-12C
      LABEL-
  FORMATTED-OUTPUT sE, GATE_PORT
  LOGFORMAT-OUTPUT sE, GATE_PORT[13]
INSTRUCTION-OUTPUT
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-GATE_PORT
  OP2 VALUE-13
    COMMENT-; update the synth
    ADDRESS-12D
      LABEL-
  FORMATTED-OR sD, TEMP
  LOGFORMAT-OR sD, TEMP[sF]
INSTRUCTION-OR
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-TEMP
  OP2 VALUE-sF
    COMMENT-; OR in the gate we want to turn on with the current gates status
    ADDRESS-12E
      LABEL-
  FORMATTED-OUTPUT sD, GATE_PORT
  LOGFORMAT-OUTPUT sD, GATE_PORT[13]
INSTRUCTION-OUTPUT
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-GATE_PORT
  OP2 VALUE-13
    COMMENT-; update the gates status
    ADDRESS-12F
      LABEL-
  FORMATTED-STORE sD, GATES
  LOGFORMAT-STORE sD, GATES[30]
INSTRUCTION-STORE
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-GATES
  OP2 VALUE-30
    COMMENT-; save new gates state
    ADDRESS-130
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-131
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-131
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-131
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-131
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-131
      LABEL-CONTROLLER_CHANGE
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; handle mod wheel, sustain and joystick here
    ADDRESS-131
      LABEL-
  FORMATTED-COMPARE DATAbyte1, MOD_WHEEL
  LOGFORMAT-COMPARE DATAbyte1[s6], MOD_WHEEL[01]
INSTRUCTION-COMPARE
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-MOD_WHEEL
  OP2 VALUE-01
    COMMENT-
    ADDRESS-132
      LABEL-
  FORMATTED-JUMP NZ, tstCCsus
  LOGFORMAT-JUMP NZ, tstCCsus[135]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-tstCCsus
  OP2 VALUE-135
    COMMENT-
    ADDRESS-133
      LABEL-
  FORMATTED-OUTPUT DATAbyte2, MOD_WHEEL_PORT
  LOGFORMAT-OUTPUT DATAbyte2[s7], MOD_WHEEL_PORT[11]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-MOD_WHEEL_PORT
  OP2 VALUE-11
    COMMENT-
    ADDRESS-134
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-135
      LABEL-tstCCsus
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-135
      LABEL-
  FORMATTED-COMPARE DATAbyte1, SUSTAIN
  LOGFORMAT-COMPARE DATAbyte1[s6], SUSTAIN[40]
INSTRUCTION-COMPARE
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-SUSTAIN
  OP2 VALUE-40
    COMMENT-; is it a sustain message?
    ADDRESS-136
      LABEL-
  FORMATTED-JUMP NZ, tstCCjoyx
  LOGFORMAT-JUMP NZ, tstCCjoyx[13A]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-tstCCjoyx
  OP2 VALUE-13A
    COMMENT-
    ADDRESS-137
      LABEL-
  FORMATTED-OUTPUT DATAbyte2, SUSTAIN_PORT
  LOGFORMAT-OUTPUT DATAbyte2[s7], SUSTAIN_PORT[12]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-SUSTAIN_PORT
  OP2 VALUE-12
    COMMENT-; update synth
    ADDRESS-138
      LABEL-
  FORMATTED-STORE DATAbyte2, SUS
  LOGFORMAT-STORE DATAbyte2[s7], SUS[32]
INSTRUCTION-STORE
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-SUS
  OP2 VALUE-32
    COMMENT-; save sustain state, (maybe) need it for release logic
    ADDRESS-139
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-13A
      LABEL-tstCCjoyx
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-13A
      LABEL-
  FORMATTED-COMPARE DATAbyte1, JOYSTICK_X
  LOGFORMAT-COMPARE DATAbyte1[s6], JOYSTICK_X[10]
INSTRUCTION-COMPARE
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-JOYSTICK_X
  OP2 VALUE-10
    COMMENT-
    ADDRESS-13B
      LABEL-
  FORMATTED-JUMP NZ, tstCCjoyy
  LOGFORMAT-JUMP NZ, tstCCjoyy[13E]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-tstCCjoyy
  OP2 VALUE-13E
    COMMENT-
    ADDRESS-13C
      LABEL-
  FORMATTED-OUTPUT DATAbyte2, JOYSTICK_X_PORT
  LOGFORMAT-OUTPUT DATAbyte2[s7], JOYSTICK_X_PORT[F4]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-JOYSTICK_X_PORT
  OP2 VALUE-F4
    COMMENT-
    ADDRESS-13D
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-13E
      LABEL-tstCCjoyy
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-13E
      LABEL-
  FORMATTED-COMPARE DATAbyte1, JOYSTICK_Y
  LOGFORMAT-COMPARE DATAbyte1[s6], JOYSTICK_Y[11]
INSTRUCTION-COMPARE
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-JOYSTICK_Y
  OP2 VALUE-11
    COMMENT-
    ADDRESS-13F
      LABEL-
  FORMATTED-JUMP NZ, tstCCallnotesoff
  LOGFORMAT-JUMP NZ, tstCCallnotesoff[142]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-tstCCallnotesoff
  OP2 VALUE-142
    COMMENT-
    ADDRESS-140
      LABEL-
  FORMATTED-OUTPUT DATAbyte2, JOYSTICK_Y_PORT
  LOGFORMAT-OUTPUT DATAbyte2[s7], JOYSTICK_Y_PORT[F5]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-JOYSTICK_Y_PORT
  OP2 VALUE-F5
    COMMENT-
    ADDRESS-141
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-142
      LABEL-tstCCallnotesoff
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-142
      LABEL-
  FORMATTED-COMPARE DATAbyte1, ALL_NOTES_OFF
  LOGFORMAT-COMPARE DATAbyte1[s6], ALL_NOTES_OFF[7B]
INSTRUCTION-COMPARE
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-ALL_NOTES_OFF
  OP2 VALUE-7B
    COMMENT-
    ADDRESS-143
      LABEL-
  FORMATTED-JUMP NZ, idle
  LOGFORMAT-JUMP NZ, idle[01D]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-idle
  OP2 VALUE-01D
    COMMENT-; we don't recognize this CC
    ADDRESS-144
      LABEL-
  FORMATTED-LOAD sD, 00
  LOGFORMAT-LOAD sD, 00
INSTRUCTION-LOAD
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-145
      LABEL-
  FORMATTED-STORE sD, GATES
  LOGFORMAT-STORE sD, GATES[30]
INSTRUCTION-STORE
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-GATES
  OP2 VALUE-30
    COMMENT-
    ADDRESS-146
      LABEL-
  FORMATTED-OUTPUT sD, GATE_PORT
  LOGFORMAT-OUTPUT sD, GATE_PORT[13]
INSTRUCTION-OUTPUT
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-GATE_PORT
  OP2 VALUE-13
    COMMENT-
    ADDRESS-147
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-148
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-148
      LABEL-CHANNEL_PRESSURE
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; handle channel pressure here
    ADDRESS-148
      LABEL-
  FORMATTED-OUTPUT DATAbyte2, CHANNEL_PRESSURE_PORT
  LOGFORMAT-OUTPUT DATAbyte2[s7], CHANNEL_PRESSURE_PORT[F0]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-CHANNEL_PRESSURE_PORT
  OP2 VALUE-F0
    COMMENT-
    ADDRESS-149
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-14A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-14A
      LABEL-PITCH_BEND
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-14A
      LABEL-
  FORMATTED-OUTPUT DATAbyte2, PITCH_WHEEL_MSB_PORT
  LOGFORMAT-OUTPUT DATAbyte2[s7], PITCH_WHEEL_MSB_PORT[F1]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte2
  OP1 VALUE-s7
   OPERAND2-PITCH_WHEEL_MSB_PORT
  OP2 VALUE-F1
    COMMENT-
    ADDRESS-14B
      LABEL-
  FORMATTED-OUTPUT DATAbyte1, PITCH_WHEEL_LSB_PORT
  LOGFORMAT-OUTPUT DATAbyte1[s6], PITCH_WHEEL_LSB_PORT[F2]
INSTRUCTION-OUTPUT
   OPERAND1-DATAbyte1
  OP1 VALUE-s6
   OPERAND2-PITCH_WHEEL_LSB_PORT
  OP2 VALUE-F2
    COMMENT-; Writing to this port triggers second buffer write of ext. 16 bit register.
    ADDRESS-14C
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-14D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-14D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;; IGNORE THESE MESSAGES
    ADDRESS-14D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;; Here we just jump to the idle loop.  My keyboard can't send these, so I don't care.  Maybe you do?
    ADDRESS-14D
      LABEL-PROGRAM_CHANGE
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; This synth doesn't react to this...
    ADDRESS-14D
      LABEL-POLY_KEY_PRESSURE
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; This synth doesn't react to this...
    ADDRESS-14D
      LABEL-
  FORMATTED-JUMP idle
  LOGFORMAT-JUMP idle[01D]
INSTRUCTION-JUMP
   OPERAND1-idle
  OP1 VALUE-01D
   OPERAND2-
  OP2 VALUE-
    COMMENT-; so ignore
    ADDRESS-14E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-14E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-14E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-14E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;; SUBROUTINES
    ADDRESS-14E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-14E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-14E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-14E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;; ISR - Handles MIDI and TTY rx data arrivals
    ADDRESS-14E
      LABEL-isr
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-14E
      LABEL-
  FORMATTED-INPUT UARTbyte, UARTstatusport
  LOGFORMAT-INPUT UARTbyte[sC], UARTstatusport[00]
INSTRUCTION-INPUT
   OPERAND1-UARTbyte
  OP1 VALUE-sC
   OPERAND2-UARTstatusport
  OP2 VALUE-00
    COMMENT-; read both UARTs rx status bits
    ADDRESS-14F
      LABEL-
  FORMATTED-AND UARTbyte, C0
  LOGFORMAT-AND UARTbyte[sC], C0
INSTRUCTION-AND
   OPERAND1-UARTbyte
  OP1 VALUE-sC
   OPERAND2-C0
  OP2 VALUE-C0
    COMMENT-; only the bits 6 and 7
    ADDRESS-150
      LABEL-
  FORMATTED-OR FLAGS, UARTbyte
  LOGFORMAT-OR FLAGS[sA], UARTbyte[sC]
INSTRUCTION-OR
   OPERAND1-FLAGS
  OP1 VALUE-sA
   OPERAND2-UARTbyte
  OP2 VALUE-sC
    COMMENT-; save status bits in FLAGS register
    ADDRESS-151
      LABEL-
  FORMATTED-TEST FLAGS, MIDI_UARTstatus_bit
  LOGFORMAT-TEST FLAGS[sA], MIDI_UARTstatus_bit[40]
INSTRUCTION-TEST
   OPERAND1-FLAGS
  OP1 VALUE-sA
   OPERAND2-MIDI_UARTstatus_bit
  OP2 VALUE-40
    COMMENT-; is the MIDI UART status bit set? 40
    ADDRESS-152
      LABEL-
  FORMATTED-JUMP Z, test_TTY
  LOGFORMAT-JUMP Z, test_TTY[156]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-test_TTY
  OP2 VALUE-156
    COMMENT-; if not, go test the TTY UART status bit
    ADDRESS-153
      LABEL-
  FORMATTED-INPUT UARTbyte, MIDIrxdataport
  LOGFORMAT-INPUT UARTbyte[sC], MIDIrxdataport[01]
INSTRUCTION-INPUT
   OPERAND1-UARTbyte
  OP1 VALUE-sC
   OPERAND2-MIDIrxdataport
  OP2 VALUE-01
    COMMENT-; MIDI UART status bit was set, update MIDIbyte
    ADDRESS-154
      LABEL-
  FORMATTED-STORE UARTbyte, MIDIinputBYTE
  LOGFORMAT-STORE UARTbyte[sC], MIDIinputBYTE[3E]
INSTRUCTION-STORE
   OPERAND1-UARTbyte
  OP1 VALUE-sC
   OPERAND2-MIDIinputBYTE
  OP2 VALUE-3E
    COMMENT-
    ADDRESS-155
      LABEL-
  FORMATTED-OR FLAGS, MIDIbyteAVAILABLE_set
  LOGFORMAT-OR FLAGS[sA], MIDIbyteAVAILABLE_set[01]
INSTRUCTION-OR
   OPERAND1-FLAGS
  OP1 VALUE-sA
   OPERAND2-MIDIbyteAVAILABLE_set
  OP2 VALUE-01
    COMMENT-; Notify idle loop that a new MIDI byte is available
    ADDRESS-156
      LABEL-test_TTY
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-156
      LABEL-
  FORMATTED-TEST FLAGS, TTY_UARTstatus_bit
  LOGFORMAT-TEST FLAGS[sA], TTY_UARTstatus_bit[80]
INSTRUCTION-TEST
   OPERAND1-FLAGS
  OP1 VALUE-sA
   OPERAND2-TTY_UARTstatus_bit
  OP2 VALUE-80
    COMMENT-; is the TTY UART status bit set?  80
    ADDRESS-157
      LABEL-
  FORMATTED-JUMP Z, isr_exit
  LOGFORMAT-JUMP Z, isr_exit[15B]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-isr_exit
  OP2 VALUE-15B
    COMMENT-; if not, we're done
    ADDRESS-158
      LABEL-
  FORMATTED-INPUT UARTbyte, TTYrxdataport
  LOGFORMAT-INPUT UARTbyte[sC], TTYrxdataport[04]
INSTRUCTION-INPUT
   OPERAND1-UARTbyte
  OP1 VALUE-sC
   OPERAND2-TTYrxdataport
  OP2 VALUE-04
    COMMENT-; TTY UART status bit was set, update MIDIbyte
    ADDRESS-159
      LABEL-
  FORMATTED-STORE UARTbyte, TTYinputBYTE
  LOGFORMAT-STORE UARTbyte[sC], TTYinputBYTE[3F]
INSTRUCTION-STORE
   OPERAND1-UARTbyte
  OP1 VALUE-sC
   OPERAND2-TTYinputBYTE
  OP2 VALUE-3F
    COMMENT-
    ADDRESS-15A
      LABEL-
  FORMATTED-OR FLAGS, TTYbyteAVAILABLE_set
  LOGFORMAT-OR FLAGS[sA], TTYbyteAVAILABLE_set[02]
INSTRUCTION-OR
   OPERAND1-FLAGS
  OP1 VALUE-sA
   OPERAND2-TTYbyteAVAILABLE_set
  OP2 VALUE-02
    COMMENT-; Notify idle loop that a new TTY byte is available
    ADDRESS-15B
      LABEL-isr_exit
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-15B
      LABEL-
  FORMATTED-AND FLAGS, 3F
  LOGFORMAT-AND FLAGS[sA], 3F
INSTRUCTION-AND
   OPERAND1-FLAGS
  OP1 VALUE-sA
   OPERAND2-3F
  OP2 VALUE-3F
    COMMENT-; turn off both UART rx status bits
    ADDRESS-15C
      LABEL-
  FORMATTED-RETURNI ENABLE
  LOGFORMAT-RETURNI ENABLE
INSTRUCTION-RETURNI
   OPERAND1-ENABLE
  OP1 VALUE-ENABLE
   OPERAND2-
  OP2 VALUE-
    COMMENT-; return from ISR, enable interrupts
    ADDRESS-15D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-15D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;; Interrupt Vector
    ADDRESS-15D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-3FF
      LABEL-
  FORMATTED-ADDRESS 3FF
  LOGFORMAT-ADDRESS 3FF
INSTRUCTION-ADDRESS
   OPERAND1-3FF
  OP1 VALUE-3FF
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-3FF
      LABEL-
  FORMATTED-JUMP isr
  LOGFORMAT-JUMP isr[14E]
INSTRUCTION-JUMP
   OPERAND1-isr
  OP1 VALUE-14E
   OPERAND2-
  OP2 VALUE-
    COMMENT-
